<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ACFly EDU.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ACFly EDU.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6150002: Last Updated: Thu Nov  4 20:49:38 2021
<BR><P>
<H3>Maximum Stack Usage =       1452 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
debug_server &rArr; mavlink_msg_debug_vect_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1a4]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NMI_Handler</a><BR>
 <LI><a href="#[b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MemManage_Handler</a><BR>
 <LI><a href="#[c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">BusFault_Handler</a><BR>
 <LI><a href="#[d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UsageFault_Handler</a><BR>
 <LI><a href="#[e]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SVC_Handler</a><BR>
 <LI><a href="#[f]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">DebugMon_Handler</a><BR>
 <LI><a href="#[10]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">PendSV_Handler</a><BR>
 <LI><a href="#[11]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SysTick_Handler</a><BR>
 <LI><a href="#[12]">GPIOA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">GPIOA_Handler</a><BR>
 <LI><a href="#[13]">GPIOB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">GPIOB_Handler</a><BR>
 <LI><a href="#[14]">GPIOC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">GPIOC_Handler</a><BR>
 <LI><a href="#[15]">GPIOD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">GPIOD_Handler</a><BR>
 <LI><a href="#[16]">GPIOE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">GPIOE_Handler</a><BR>
 <LI><a href="#[17]">UART0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UART0_Handler</a><BR>
 <LI><a href="#[18]">UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">UART1_Handler</a><BR>
 <LI><a href="#[19]">SSI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">SSI0_Handler</a><BR>
 <LI><a href="#[1a]">I2C0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">I2C0_Handler</a><BR>
 <LI><a href="#[1b]">PMW0_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">PMW0_FAULT_Handler</a><BR>
 <LI><a href="#[1c]">PWM0_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">PWM0_0_Handler</a><BR>
 <LI><a href="#[1d]">PWM0_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">PWM0_1_Handler</a><BR>
 <LI><a href="#[1e]">PWM0_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">PWM0_2_Handler</a><BR>
 <LI><a href="#[1f]">QEI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">QEI0_Handler</a><BR>
 <LI><a href="#[20]">ADC0SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC0SS0_Handler</a><BR>
 <LI><a href="#[21]">ADC0SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC0SS1_Handler</a><BR>
 <LI><a href="#[22]">ADC0SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC0SS2_Handler</a><BR>
 <LI><a href="#[23]">ADC0SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC0SS3_Handler</a><BR>
 <LI><a href="#[24]">WDT0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">WDT0_Handler</a><BR>
 <LI><a href="#[25]">TIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">TIMER0A_Handler</a><BR>
 <LI><a href="#[26]">TIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">TIMER0B_Handler</a><BR>
 <LI><a href="#[27]">TIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">TIMER1A_Handler</a><BR>
 <LI><a href="#[28]">TIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">TIMER1B_Handler</a><BR>
 <LI><a href="#[29]">TIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">TIMER2A_Handler</a><BR>
 <LI><a href="#[2a]">TIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">TIMER2B_Handler</a><BR>
 <LI><a href="#[2b]">COMP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">COMP0_Handler</a><BR>
 <LI><a href="#[2c]">COMP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">COMP1_Handler</a><BR>
 <LI><a href="#[2d]">COMP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">COMP2_Handler</a><BR>
 <LI><a href="#[2e]">SYSCTL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">SYSCTL_Handler</a><BR>
 <LI><a href="#[2f]">FLASH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">FLASH_Handler</a><BR>
 <LI><a href="#[30]">GPIOF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">GPIOF_Handler</a><BR>
 <LI><a href="#[31]">GPIOG_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">GPIOG_Handler</a><BR>
 <LI><a href="#[32]">GPIOH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">GPIOH_Handler</a><BR>
 <LI><a href="#[33]">UART2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">UART2_Handler</a><BR>
 <LI><a href="#[34]">SSI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">SSI1_Handler</a><BR>
 <LI><a href="#[35]">TIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">TIMER3A_Handler</a><BR>
 <LI><a href="#[36]">TIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">TIMER3B_Handler</a><BR>
 <LI><a href="#[37]">I2C1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">I2C1_Handler</a><BR>
 <LI><a href="#[38]">QEI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">QEI1_Handler</a><BR>
 <LI><a href="#[39]">CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">CAN0_Handler</a><BR>
 <LI><a href="#[3a]">CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">CAN1_Handler</a><BR>
 <LI><a href="#[3b]">CAN2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">CAN2_Handler</a><BR>
 <LI><a href="#[3c]">HIB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">HIB_Handler</a><BR>
 <LI><a href="#[3d]">USB0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">USB0_Handler</a><BR>
 <LI><a href="#[3e]">PWM0_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">PWM0_3_Handler</a><BR>
 <LI><a href="#[3f]">UDMA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">UDMA_Handler</a><BR>
 <LI><a href="#[40]">UDMAERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">UDMAERR_Handler</a><BR>
 <LI><a href="#[41]">ADC1SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">ADC1SS0_Handler</a><BR>
 <LI><a href="#[42]">ADC1SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">ADC1SS1_Handler</a><BR>
 <LI><a href="#[43]">ADC1SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">ADC1SS2_Handler</a><BR>
 <LI><a href="#[44]">ADC1SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">ADC1SS3_Handler</a><BR>
 <LI><a href="#[45]">GPIOJ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">GPIOJ_Handler</a><BR>
 <LI><a href="#[46]">GPIOK_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">GPIOK_Handler</a><BR>
 <LI><a href="#[47]">GPIOL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">GPIOL_Handler</a><BR>
 <LI><a href="#[48]">SSI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">SSI2_Handler</a><BR>
 <LI><a href="#[49]">SSI3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">SSI3_Handler</a><BR>
 <LI><a href="#[4a]">UART3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">UART3_Handler</a><BR>
 <LI><a href="#[4b]">UART4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">UART4_Handler</a><BR>
 <LI><a href="#[4c]">UART5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">UART5_Handler</a><BR>
 <LI><a href="#[4d]">UART6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">UART6_Handler</a><BR>
 <LI><a href="#[4e]">UART7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">UART7_Handler</a><BR>
 <LI><a href="#[4f]">I2C2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">I2C2_Handler</a><BR>
 <LI><a href="#[50]">I2C3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">I2C3_Handler</a><BR>
 <LI><a href="#[51]">TIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">TIMER4A_Handler</a><BR>
 <LI><a href="#[52]">TIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">TIMER4B_Handler</a><BR>
 <LI><a href="#[53]">TIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">TIMER5A_Handler</a><BR>
 <LI><a href="#[54]">TIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">TIMER5B_Handler</a><BR>
 <LI><a href="#[55]">WTIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">WTIMER0A_Handler</a><BR>
 <LI><a href="#[56]">WTIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">WTIMER0B_Handler</a><BR>
 <LI><a href="#[57]">WTIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">WTIMER1A_Handler</a><BR>
 <LI><a href="#[58]">WTIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">WTIMER1B_Handler</a><BR>
 <LI><a href="#[59]">WTIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">WTIMER2A_Handler</a><BR>
 <LI><a href="#[5a]">WTIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">WTIMER2B_Handler</a><BR>
 <LI><a href="#[5b]">WTIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">WTIMER3A_Handler</a><BR>
 <LI><a href="#[5c]">WTIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">WTIMER3B_Handler</a><BR>
 <LI><a href="#[5d]">WTIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">WTIMER4A_Handler</a><BR>
 <LI><a href="#[5e]">WTIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">WTIMER4B_Handler</a><BR>
 <LI><a href="#[5f]">WTIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">WTIMER5A_Handler</a><BR>
 <LI><a href="#[60]">WTIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">WTIMER5B_Handler</a><BR>
 <LI><a href="#[61]">FPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">FPU_Handler</a><BR>
 <LI><a href="#[62]">I2C4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">I2C4_Handler</a><BR>
 <LI><a href="#[63]">I2C5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">I2C5_Handler</a><BR>
 <LI><a href="#[64]">GPIOM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">GPIOM_Handler</a><BR>
 <LI><a href="#[65]">GPION_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">GPION_Handler</a><BR>
 <LI><a href="#[66]">QEI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">QEI2_Handler</a><BR>
 <LI><a href="#[67]">GPIOP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67]">GPIOP0_Handler</a><BR>
 <LI><a href="#[68]">GPIOP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">GPIOP1_Handler</a><BR>
 <LI><a href="#[69]">GPIOP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">GPIOP2_Handler</a><BR>
 <LI><a href="#[6a]">GPIOP3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">GPIOP3_Handler</a><BR>
 <LI><a href="#[6b]">GPIOP4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">GPIOP4_Handler</a><BR>
 <LI><a href="#[6c]">GPIOP5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">GPIOP5_Handler</a><BR>
 <LI><a href="#[6d]">GPIOP6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">GPIOP6_Handler</a><BR>
 <LI><a href="#[6e]">GPIOP7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">GPIOP7_Handler</a><BR>
 <LI><a href="#[6f]">GPIOQ0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">GPIOQ0_Handler</a><BR>
 <LI><a href="#[70]">GPIOQ1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">GPIOQ1_Handler</a><BR>
 <LI><a href="#[71]">GPIOQ2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">GPIOQ2_Handler</a><BR>
 <LI><a href="#[72]">GPIOQ3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">GPIOQ3_Handler</a><BR>
 <LI><a href="#[73]">GPIOQ4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">GPIOQ4_Handler</a><BR>
 <LI><a href="#[74]">GPIOQ5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">GPIOQ5_Handler</a><BR>
 <LI><a href="#[75]">GPIOQ6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">GPIOQ6_Handler</a><BR>
 <LI><a href="#[76]">GPIOQ7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">GPIOQ7_Handler</a><BR>
 <LI><a href="#[77]">GPIOR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">GPIOR_Handler</a><BR>
 <LI><a href="#[78]">GPIOS_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">GPIOS_Handler</a><BR>
 <LI><a href="#[79]">PMW1_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">PMW1_0_Handler</a><BR>
 <LI><a href="#[7a]">PWM1_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">PWM1_1_Handler</a><BR>
 <LI><a href="#[7b]">PWM1_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">PWM1_2_Handler</a><BR>
 <LI><a href="#[7c]">PWM1_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7c]">PWM1_3_Handler</a><BR>
 <LI><a href="#[7d]">PWM1_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">PWM1_FAULT_Handler</a><BR>
 <LI><a href="#[218]">UARTConfigSetExpClk</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[218]">UARTConfigSetExpClk</a><BR>
 <LI><a href="#[174]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[174]">SysCtlDelay</a><BR>
 <LI><a href="#[2a5]">SSIDataPut</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a5]">SSIDataPut</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC0SS0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[21]">ADC0SS1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[22]">ADC0SS2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[23]">ADC0SS3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[41]">ADC1SS0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[42]">ADC1SS1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[43]">ADC1SS2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[44]">ADC1SS3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[89]">ADC_Server</a> from drv_adc.o(.text.ADC_Server) referenced 2 times from drv_adc.o(.text.init_drv_ADC)
 <LI><a href="#[c]">BusFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[39]">CAN0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3a]">CAN1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3b]">CAN2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[a1]">CDCTickHandler</a> from usbdcdc.o(i.CDCTickHandler) referenced from usbdcdc.o(i.USBDCDCCompositeInit)
 <LI><a href="#[2b]">COMP0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2c]">COMP1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2d]">COMP2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[e9]">Cmd10_MAV_CMD_SEND_WGA</a> from mavlinkcmdprocess.o(.text.Cmd10_MAV_CMD_SEND_WGA) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[ea]">Cmd11_MAV_CMD_WRITE_WGA</a> from mavlinkcmdprocess.o(.text.Cmd11_MAV_CMD_WRITE_WGA) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[eb]">Cmd176_MAV_CMD_DO_SET_MODE</a> from mavlinkcmdprocess.o(.text.Cmd176_MAV_CMD_DO_SET_MODE) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[ec]">Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL</a> from mavlinkcmdprocess.o(.text.Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[ed]">Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION</a> from mavlinkcmdprocess.o(.text.Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[85]">CommuLink_RCServer</a> from commulink.o(.text.CommuLink_RCServer) referenced 2 times from commulink.o(.text.init_CommuLink)
 <LI><a href="#[84]">CommuLink_RCTrigger</a> from commulink.o(.text.CommuLink_RCTrigger) referenced 2 times from commulink.o(.text.init_CommuLink)
 <LI><a href="#[86]">CommuLink_SendServer</a> from commulink.o(.text.CommuLink_SendServer) referenced 2 times from commulink.o(.text.init_CommuLink)
 <LI><a href="#[aa]">DMAUSBIntHandler</a> from usbdma.o(i.DMAUSBIntHandler) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[ac]">DMAUSBIntStatusClear</a> from usbdma.o(i.DMAUSBIntStatusClear) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[ad]">DMAUSBStatus</a> from usbdma.o(i.DMAUSBStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[f]">DebugMon_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2f]">FLASH_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[61]">FPU_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[12]">GPIOA_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[13]">GPIOB_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[14]">GPIOC_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[15]">GPIOD_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[16]">GPIOE_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[30]">GPIOF_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[31]">GPIOG_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[32]">GPIOH_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[45]">GPIOJ_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[46]">GPIOK_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[47]">GPIOL_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[64]">GPIOM_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[65]">GPION_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[67]">GPIOP0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[68]">GPIOP1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[69]">GPIOP2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6a]">GPIOP3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6b]">GPIOP4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6c]">GPIOP5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6d]">GPIOP6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6e]">GPIOP7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6f]">GPIOQ0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[70]">GPIOQ1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[71]">GPIOQ2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[72]">GPIOQ3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[73]">GPIOQ4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[74]">GPIOQ5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[75]">GPIOQ6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[76]">GPIOQ7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[77]">GPIOR_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[78]">GPIOS_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8a]">GPS_Handler</a> from drv_gps.o(.text.GPS_Handler) referenced 2 times from drv_gps.o(.text.init_drv_GPS)
 <LI><a href="#[8b]">GPS_Server</a> from drv_gps.o(.text.GPS_Server) referenced 2 times from drv_gps.o(.text.init_drv_GPS)
 <LI><a href="#[3c]">HIB_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[bc]">HandleConfigChange</a> from usbdcdc.o(i.HandleConfigChange) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[c2]">HandleDevice</a> from usbdcdc.o(i.HandleDevice) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[c0]">HandleDisconnect</a> from usbdcdc.o(i.HandleDisconnect) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[bd]">HandleEP0Data</a> from usbdcdc.o(i.HandleEP0Data) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[c1]">HandleEndpoints</a> from usbdcdc.o(i.HandleEndpoints) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[bb]">HandleRequests</a> from usbdcdc.o(i.HandleRequests) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[bf]">HandleResume</a> from usbdcdc.o(i.HandleResume) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[be]">HandleSuspend</a> from usbdcdc.o(i.HandleSuspend) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[a]">HardFault_Handler</a> from main.o(.text.HardFault_Handler) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1a]">I2C0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[97]">I2C0_Transfered_Handler</a> from drv_sensors.o(.text.I2C0_Transfered_Handler) referenced 2 times from drv_sensors.o(.text.init_drv_Sensors)
 <LI><a href="#[37]">I2C1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[98]">I2C1_Transfered_Handler</a> from drv_sensors.o(.text.I2C1_Transfered_Handler) referenced 2 times from drv_sensors.o(.text.init_drv_Sensors)
 <LI><a href="#[4f]">I2C2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[50]">I2C3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[62]">I2C4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[63]">I2C5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8c]">LED_server</a> from drv_led.o(.text.LED_server) referenced 2 times from drv_led.o(.text.init_drv_LED)
 <LI><a href="#[d0]">M00_init_MainFunc</a> from m00_init.o(.text.M00_init_MainFunc) referenced from m00_init.o(.rodata.M00_init)
 <LI><a href="#[ce]">M00_init_enter</a> from m00_init.o(.text.M00_init_enter) referenced from m00_init.o(.rodata.M00_init)
 <LI><a href="#[cf]">M00_init_exit</a> from m00_init.o(.text.M00_init_exit) referenced from m00_init.o(.rodata.M00_init)
 <LI><a href="#[d3]">M01_Ground_MainFunc</a> from m01_ground.o(.text.M01_Ground_MainFunc) referenced from m01_ground.o(.rodata.M01_Ground)
 <LI><a href="#[d1]">M01_Ground_enter</a> from m01_ground.o(.text.M01_Ground_enter) referenced from m01_ground.o(.rodata.M01_Ground)
 <LI><a href="#[d2]">M01_Ground_exit</a> from m01_ground.o(.text.M01_Ground_exit) referenced from m01_ground.o(.rodata.M01_Ground)
 <LI><a href="#[d6]">M10_RCCalib_MainFunc</a> from m10_rccalib.o(.text.M10_RCCalib_MainFunc) referenced from m10_rccalib.o(.rodata.M10_RCCalib)
 <LI><a href="#[d4]">M10_RCCalib_enter</a> from m10_rccalib.o(.text.M10_RCCalib_enter) referenced from m10_rccalib.o(.rodata.M10_RCCalib)
 <LI><a href="#[d5]">M10_RCCalib_exit</a> from m10_rccalib.o(.text.M10_RCCalib_exit) referenced from m10_rccalib.o(.rodata.M10_RCCalib)
 <LI><a href="#[d9]">M12_AccCalib_MainFunc</a> from m12_acccalib.o(.text.M12_AccCalib_MainFunc) referenced from m12_acccalib.o(.rodata.M12_AccCalib)
 <LI><a href="#[d7]">M12_AccCalib_enter</a> from m12_acccalib.o(.text.M12_AccCalib_enter) referenced from m12_acccalib.o(.rodata.M12_AccCalib)
 <LI><a href="#[d8]">M12_AccCalib_exit</a> from m12_acccalib.o(.text.M12_AccCalib_exit) referenced from m12_acccalib.o(.rodata.M12_AccCalib)
 <LI><a href="#[dc]">M13_MagCalib_MainFunc</a> from m13_magcalib.o(.text.M13_MagCalib_MainFunc) referenced from m13_magcalib.o(.rodata.M13_MagCalib)
 <LI><a href="#[da]">M13_MagCalib_enter</a> from m13_magcalib.o(.text.M13_MagCalib_enter) referenced from m13_magcalib.o(.rodata.M13_MagCalib)
 <LI><a href="#[db]">M13_MagCalib_exit</a> from m13_magcalib.o(.text.M13_MagCalib_exit) referenced from m13_magcalib.o(.rodata.M13_MagCalib)
 <LI><a href="#[df]">M15_HorizontalCalib_MainFunc</a> from m15_horizontalcalib.o(.text.M15_HorizontalCalib_MainFunc) referenced from m15_horizontalcalib.o(.rodata.M15_HorizontalCalib)
 <LI><a href="#[dd]">M15_HorizontalCalib_enter</a> from m15_horizontalcalib.o(.text.M15_HorizontalCalib_enter) referenced from m15_horizontalcalib.o(.rodata.M15_HorizontalCalib)
 <LI><a href="#[de]">M15_HorizontalCalib_exit</a> from m15_horizontalcalib.o(.text.M15_HorizontalCalib_exit) referenced from m15_horizontalcalib.o(.rodata.M15_HorizontalCalib)
 <LI><a href="#[e2]">M30_Att_MainFunc</a> from m30_att.o(.text.M30_Att_MainFunc) referenced from m30_att.o(.rodata.M30_Att)
 <LI><a href="#[e0]">M30_Att_enter</a> from m30_att.o(.text.M30_Att_enter) referenced from m30_att.o(.rodata.M30_Att)
 <LI><a href="#[e1]">M30_Att_exit</a> from m30_att.o(.text.M30_Att_exit) referenced from m30_att.o(.rodata.M30_Att)
 <LI><a href="#[e5]">M32_PosCtrl_MainFunc</a> from m32_posctrl.o(.text.M32_PosCtrl_MainFunc) referenced from m32_posctrl.o(.rodata.M32_PosCtrl)
 <LI><a href="#[e3]">M32_PosCtrl_enter</a> from m32_posctrl.o(.text.M32_PosCtrl_enter) referenced from m32_posctrl.o(.rodata.M32_PosCtrl)
 <LI><a href="#[e4]">M32_PosCtrl_exit</a> from m32_posctrl.o(.text.M32_PosCtrl_exit) referenced from m32_posctrl.o(.rodata.M32_PosCtrl)
 <LI><a href="#[e8]">M35_Auto1_MainFunc</a> from m35_auto1.o(.text.M35_Auto1_MainFunc) referenced from m35_auto1.o(.rodata.M35_Auto1)
 <LI><a href="#[e6]">M35_Auto1_enter</a> from m35_auto1.o(.text.M35_Auto1_enter) referenced from m35_auto1.o(.rodata.M35_Auto1)
 <LI><a href="#[e7]">M35_Auto1_exit</a> from m35_auto1.o(.text.M35_Auto1_exit) referenced from m35_auto1.o(.rodata.M35_Auto1)
 <LI><a href="#[9a]">MainMCHandler</a> from drv_sensors.o(.text.MainMCHandler) referenced 2 times from drv_sensors.o(.text.init_drv_Sensors)
 <LI><a href="#[b]">MemManage_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[88]">Modes_Server</a> from modes.o(.text.Modes_Server) referenced 2 times from modes.o(.text.init_Modes)
 <LI><a href="#[ee]">Msg0_HEARTBEAT</a> from mavlinkrcprocess.o(.text.Msg0_HEARTBEAT) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[ef]">Msg20_PARAM_REQUEST_READ</a> from mavlinkrcprocess.o(.text.Msg20_PARAM_REQUEST_READ) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[f0]">Msg21_PARAM_REQUEST_LIST</a> from mavlinkrcprocess.o(.text.Msg21_PARAM_REQUEST_LIST) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[f1]">Msg23_PARAM_SET</a> from mavlinkrcprocess.o(.text.Msg23_PARAM_SET) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[f4]">Msg30_ATTITUDE</a> from mavlinksendfuncs.o(.text.Msg30_ATTITUDE) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[f5]">Msg31_ATTITUDE_QUATERNION</a> from mavlinksendfuncs.o(.text.Msg31_ATTITUDE_QUATERNION) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[f6]">Msg32_LOCAL_POSITION_NED</a> from mavlinksendfuncs.o(.text.Msg32_LOCAL_POSITION_NED) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[f2]">Msg66_REQUEST_DATA_STREAM</a> from mavlinkrcprocess.o(.text.Msg66_REQUEST_DATA_STREAM) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[f3]">Msg76_COMMAND_LONG</a> from mavlinkrcprocess.o(.text.Msg76_COMMAND_LONG) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[9]">NMI_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8d]">OLED_Sent_Handler</a> from drv_oled.o(.text.OLED_Sent_Handler) referenced 2 times from drv_oled.o(.text.init_drv_OLED)
 <LI><a href="#[8e]">OpticalFlow_Handler</a> from drv_opticalflow.o(.text.OpticalFlow_Handler) referenced 2 times from drv_opticalflow.o(.text.init_drv_OpticalFlow)
 <LI><a href="#[1b]">PMW0_FAULT_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[79]">PMW1_0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[90]">PPM_Receive_Handler</a> from drv_receiver.o(.text.PPM_Receive_Handler) referenced 2 times from drv_receiver.o(.text.init_drv_Receiver)
 <LI><a href="#[1c]">PWM0_0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1d]">PWM0_1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1e]">PWM0_2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3e]">PWM0_3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7a]">PWM1_1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7b]">PWM1_2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7c]">PWM1_3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7d]">PWM1_FAULT_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[102]">Param_get_BatSTVoltage</a> from configurations.o(.text.Param_get_BatSTVoltage) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[104]">Param_get_BatVADCMag</a> from configurations.o(.text.Param_get_BatVADCMag) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[fe]">Param_get_MotorFullThrottleRatio</a> from configurations.o(.text.Param_get_MotorFullThrottleRatio) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[fc]">Param_get_MotorNonlineFactor</a> from configurations.o(.text.Param_get_MotorNonlineFactor) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[fa]">Param_get_MotorStartingThrottle</a> from configurations.o(.text.Param_get_MotorStartingThrottle) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[100]">Param_get_MotorT</a> from configurations.o(.text.Param_get_MotorT) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[11a]">Param_get_PitchCtrl_P1</a> from configurations.o(.text.Param_get_PitchCtrl_P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[11c]">Param_get_PitchCtrl_P2</a> from configurations.o(.text.Param_get_PitchCtrl_P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[11e]">Param_get_PitchCtrl_P3</a> from configurations.o(.text.Param_get_PitchCtrl_P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[120]">Param_get_PitchCtrl_P4</a> from configurations.o(.text.Param_get_PitchCtrl_P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[122]">Param_get_PitchCtrl_TD4P1</a> from configurations.o(.text.Param_get_PitchCtrl_TD4P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[124]">Param_get_PitchCtrl_TD4P2</a> from configurations.o(.text.Param_get_PitchCtrl_TD4P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[126]">Param_get_PitchCtrl_TD4P3</a> from configurations.o(.text.Param_get_PitchCtrl_TD4P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[128]">Param_get_PitchCtrl_TD4P4</a> from configurations.o(.text.Param_get_PitchCtrl_TD4P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[118]">Param_get_PitchCtrl_b</a> from configurations.o(.text.Param_get_PitchCtrl_b) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[108]">Param_get_RollCtrl_P1</a> from configurations.o(.text.Param_get_RollCtrl_P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[10a]">Param_get_RollCtrl_P2</a> from configurations.o(.text.Param_get_RollCtrl_P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[10c]">Param_get_RollCtrl_P3</a> from configurations.o(.text.Param_get_RollCtrl_P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[10e]">Param_get_RollCtrl_P4</a> from configurations.o(.text.Param_get_RollCtrl_P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[110]">Param_get_RollCtrl_TD4P1</a> from configurations.o(.text.Param_get_RollCtrl_TD4P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[112]">Param_get_RollCtrl_TD4P2</a> from configurations.o(.text.Param_get_RollCtrl_TD4P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[114]">Param_get_RollCtrl_TD4P3</a> from configurations.o(.text.Param_get_RollCtrl_TD4P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[116]">Param_get_RollCtrl_TD4P4</a> from configurations.o(.text.Param_get_RollCtrl_TD4P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[106]">Param_get_RollCtrl_b</a> from configurations.o(.text.Param_get_RollCtrl_b) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[f8]">Param_get_UAVType</a> from configurations.o(.text.Param_get_UAVType) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[12c]">Param_get_YawCtrl_P1</a> from configurations.o(.text.Param_get_YawCtrl_P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[12e]">Param_get_YawCtrl_P2</a> from configurations.o(.text.Param_get_YawCtrl_P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[130]">Param_get_YawCtrl_P3</a> from configurations.o(.text.Param_get_YawCtrl_P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[132]">Param_get_YawCtrl_P4</a> from configurations.o(.text.Param_get_YawCtrl_P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[134]">Param_get_YawCtrl_TD4P1</a> from configurations.o(.text.Param_get_YawCtrl_TD4P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[136]">Param_get_YawCtrl_TD4P2</a> from configurations.o(.text.Param_get_YawCtrl_TD4P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[138]">Param_get_YawCtrl_TD4P3</a> from configurations.o(.text.Param_get_YawCtrl_TD4P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[13a]">Param_get_YawCtrl_TD4P4</a> from configurations.o(.text.Param_get_YawCtrl_TD4P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[12a]">Param_get_YawCtrl_b</a> from configurations.o(.text.Param_get_YawCtrl_b) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[101]">Param_set_BatSTVoltage</a> from configurations.o(.text.Param_set_BatSTVoltage) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[103]">Param_set_BatVADCMag</a> from configurations.o(.text.Param_set_BatVADCMag) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[fd]">Param_set_MotorFullThrottleRatio</a> from configurations.o(.text.Param_set_MotorFullThrottleRatio) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[fb]">Param_set_MotorNonlineFactor</a> from configurations.o(.text.Param_set_MotorNonlineFactor) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[f9]">Param_set_MotorStartingThrottle</a> from configurations.o(.text.Param_set_MotorStartingThrottle) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[ff]">Param_set_MotorT</a> from configurations.o(.text.Param_set_MotorT) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[119]">Param_set_PitchCtrl_P1</a> from configurations.o(.text.Param_set_PitchCtrl_P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[11b]">Param_set_PitchCtrl_P2</a> from configurations.o(.text.Param_set_PitchCtrl_P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[11d]">Param_set_PitchCtrl_P3</a> from configurations.o(.text.Param_set_PitchCtrl_P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[11f]">Param_set_PitchCtrl_P4</a> from configurations.o(.text.Param_set_PitchCtrl_P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[121]">Param_set_PitchCtrl_TD4P1</a> from configurations.o(.text.Param_set_PitchCtrl_TD4P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[123]">Param_set_PitchCtrl_TD4P2</a> from configurations.o(.text.Param_set_PitchCtrl_TD4P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[125]">Param_set_PitchCtrl_TD4P3</a> from configurations.o(.text.Param_set_PitchCtrl_TD4P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[127]">Param_set_PitchCtrl_TD4P4</a> from configurations.o(.text.Param_set_PitchCtrl_TD4P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[117]">Param_set_PitchCtrl_b</a> from configurations.o(.text.Param_set_PitchCtrl_b) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[107]">Param_set_RollCtrl_P1</a> from configurations.o(.text.Param_set_RollCtrl_P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[109]">Param_set_RollCtrl_P2</a> from configurations.o(.text.Param_set_RollCtrl_P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[10b]">Param_set_RollCtrl_P3</a> from configurations.o(.text.Param_set_RollCtrl_P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[10d]">Param_set_RollCtrl_P4</a> from configurations.o(.text.Param_set_RollCtrl_P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[10f]">Param_set_RollCtrl_TD4P1</a> from configurations.o(.text.Param_set_RollCtrl_TD4P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[111]">Param_set_RollCtrl_TD4P2</a> from configurations.o(.text.Param_set_RollCtrl_TD4P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[113]">Param_set_RollCtrl_TD4P3</a> from configurations.o(.text.Param_set_RollCtrl_TD4P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[115]">Param_set_RollCtrl_TD4P4</a> from configurations.o(.text.Param_set_RollCtrl_TD4P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[105]">Param_set_RollCtrl_b</a> from configurations.o(.text.Param_set_RollCtrl_b) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[f7]">Param_set_UAVType</a> from configurations.o(.text.Param_set_UAVType) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[12b]">Param_set_YawCtrl_P1</a> from configurations.o(.text.Param_set_YawCtrl_P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[12d]">Param_set_YawCtrl_P2</a> from configurations.o(.text.Param_set_YawCtrl_P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[12f]">Param_set_YawCtrl_P3</a> from configurations.o(.text.Param_set_YawCtrl_P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[131]">Param_set_YawCtrl_P4</a> from configurations.o(.text.Param_set_YawCtrl_P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[133]">Param_set_YawCtrl_TD4P1</a> from configurations.o(.text.Param_set_YawCtrl_TD4P1) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[135]">Param_set_YawCtrl_TD4P2</a> from configurations.o(.text.Param_set_YawCtrl_TD4P2) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[137]">Param_set_YawCtrl_TD4P3</a> from configurations.o(.text.Param_set_YawCtrl_TD4P3) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[139]">Param_set_YawCtrl_TD4P4</a> from configurations.o(.text.Param_set_YawCtrl_TD4P4) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[129]">Param_set_YawCtrl_b</a> from configurations.o(.text.Param_set_YawCtrl_b) referenced from configurations.o(.rodata.Params)
 <LI><a href="#[10]">PendSV_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1f]">QEI0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[38]">QEI1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[66]">QEI2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[91]">RC_Check_Server</a> from drv_receiver.o(.text.RC_Check_Server) referenced 2 times from drv_receiver.o(.text.init_drv_Receiver)
 <LI><a href="#[8]">Reset_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[93]">SDI_RCTrigger</a> from drv_sdi.o(.text.SDI_RCTrigger) referenced 2 times from drv_sdi.o(.text.init_drv_SDI)
 <LI><a href="#[95]">SDI_RCTrigger</a> from drv_sdi2.o(.text.SDI_RCTrigger) referenced 2 times from drv_sdi2.o(.text.init_drv_SDI2)
 <LI><a href="#[94]">SDI_Server</a> from drv_sdi.o(.text.SDI_Server) referenced 2 times from drv_sdi.o(.text.init_drv_SDI)
 <LI><a href="#[96]">SDI_Server</a> from drv_sdi2.o(.text.SDI_Server) referenced 2 times from drv_sdi2.o(.text.init_drv_SDI2)
 <LI><a href="#[19]">SSI0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[34]">SSI1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[48]">SSI2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[49]">SSI3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2e]">SYSCTL_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8f]">Sbus_Receive_Handler</a> from drv_receiver.o(.text.Sbus_Receive_Handler) referenced 2 times from drv_receiver.o(.text.init_drv_Receiver)
 <LI><a href="#[11]">SysTick_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7e]">SystemInit</a> from system_tm4c123.o(.text.SystemInit) referenced from startup_tm4c123.o(.text)
 <LI><a href="#[83]">Systick_IRQHandler</a> from basic.o(.text.Systick_IRQHandler) referenced 2 times from basic.o(.text.init_Basic)
 <LI><a href="#[25]">TIMER0A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[26]">TIMER0B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[27]">TIMER1A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[28]">TIMER1B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[29]">TIMER2A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2a]">TIMER2B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[35]">TIMER3A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[36]">TIMER3B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[51]">TIMER4A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[52]">TIMER4B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[53]">TIMER5A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[54]">TIMER5B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[99]">Timer2A_IRQHandler</a> from drv_sensors.o(.text.Timer2A_IRQHandler) referenced 2 times from drv_sensors.o(.text.init_drv_Sensors)
 <LI><a href="#[17]">UART0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[18]">UART1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[9f]">UART2_Handler</a> from drv_uart2.o(.text.UART2_Handler) referenced 2 times from drv_uart2.o(.text.init_drv_Uart2)
 <LI><a href="#[33]">UART2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[92]">UART3_Handler</a> from drv_sdi.o(.text.UART3_Handler) referenced 2 times from drv_sdi.o(.text.init_drv_SDI)
 <LI><a href="#[4a]">UART3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4b]">UART4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4c]">UART5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4d]">UART6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[a0]">UART7_Handler</a> from drv_ultrasonic.o(.text.UART7_Handler) referenced 2 times from drv_ultrasonic.o(.text.init_drv_Ultrasonic)
 <LI><a href="#[4e]">UART7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[40]">UDMAERR_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3f]">UDMA_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[9b]">USB0DeviceIntHandler</a> from usbdhandler.o(i.USB0DeviceIntHandler) referenced 2 times from drv_usb.o(.text.init_drv_USB)
 <LI><a href="#[3d]">USB0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1]">USBBufferEventCallback</a> from usbbuffer.o(i.USBBufferEventCallback) referenced 4 times from usb_def.o(.data.g_sCDCDevice)
 <LI><a href="#[3]">USBDCDCPacketRead</a> from usbdcdc.o(i.USBDCDCPacketRead) referenced 2 times from usb_def.o(.data.g_sRxBuffer)
 <LI><a href="#[6]">USBDCDCPacketWrite</a> from usbdcdc.o(i.USBDCDCPacketWrite) referenced 2 times from usb_def.o(.data.g_sTxBuffer)
 <LI><a href="#[4]">USBDCDCRxPacketAvailable</a> from usbdcdc.o(i.USBDCDCRxPacketAvailable) referenced 2 times from usb_def.o(.data.g_sRxBuffer)
 <LI><a href="#[7]">USBDCDCTxPacketAvailable</a> from usbdcdc.o(i.USBDCDCTxPacketAvailable) referenced 2 times from usb_def.o(.data.g_sTxBuffer)
 <LI><a href="#[c4]">USBDClearFeature</a> from usbdenum.o(i.USBDClearFeature) referenced from usbdenum.o(.constdata)
 <LI><a href="#[0]">USBDControlHandler</a> from drv_usb.o(.text.USBDControlHandler) referenced 2 times from usb_def.o(.data.g_sCDCDevice)
 <LI><a href="#[c9]">USBDGetConfiguration</a> from usbdenum.o(i.USBDGetConfiguration) referenced from usbdenum.o(.constdata)
 <LI><a href="#[c7]">USBDGetDescriptor</a> from usbdenum.o(i.USBDGetDescriptor) referenced from usbdenum.o(.constdata)
 <LI><a href="#[cb]">USBDGetInterface</a> from usbdenum.o(i.USBDGetInterface) referenced from usbdenum.o(.constdata)
 <LI><a href="#[c3]">USBDGetStatus</a> from usbdenum.o(i.USBDGetStatus) referenced from usbdenum.o(.constdata)
 <LI><a href="#[2]">USBDRxHandler</a> from drv_usb.o(.text.USBDRxHandler) referenced 2 times from usb_def.o(.data.g_sRxBuffer)
 <LI><a href="#[c6]">USBDSetAddress</a> from usbdenum.o(i.USBDSetAddress) referenced from usbdenum.o(.constdata)
 <LI><a href="#[ca]">USBDSetConfiguration</a> from usbdenum.o(i.USBDSetConfiguration) referenced from usbdenum.o(.constdata)
 <LI><a href="#[c8]">USBDSetDescriptor</a> from usbdenum.o(i.USBDSetDescriptor) referenced from usbdenum.o(.constdata)
 <LI><a href="#[c5]">USBDSetFeature</a> from usbdenum.o(i.USBDSetFeature) referenced from usbdenum.o(.constdata)
 <LI><a href="#[cc]">USBDSetInterface</a> from usbdenum.o(i.USBDSetInterface) referenced from usbdenum.o(.constdata)
 <LI><a href="#[cd]">USBDSyncFrame</a> from usbdenum.o(i.USBDSyncFrame) referenced from usbdenum.o(.constdata)
 <LI><a href="#[5]">USBDTxHandler</a> from drv_usb.o(.text.USBDTxHandler) referenced 2 times from usb_def.o(.data.g_sTxBuffer)
 <LI><a href="#[d]">UsageFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[9d]">UsbUart_DataAvailable</a> from drv_usb.o(.text.UsbUart_DataAvailable) referenced 2 times from drv_usb.o(.text.init_drv_USB)
 <LI><a href="#[24]">WDT0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[55]">WTIMER0A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[56]">WTIMER0B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[57]">WTIMER1A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[58]">WTIMER1B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[59]">WTIMER2A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5a]">WTIMER2B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5b]">WTIMER3A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5c]">WTIMER3B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5d]">WTIMER4A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5e]">WTIMER4B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5f]">WTIMER5A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[60]">WTIMER5B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7f]">__main</a> from __main.o(!!!main) referenced from startup_tm4c123.o(.text)
 <LI><a href="#[82]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[81]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[80]">_sputc</a> from _sputc.o(.text) referenced from sprintf.o(.text)
 <LI><a href="#[87]">debug_server</a> from debug.o(.text.debug_server) referenced 2 times from debug.o(.text.init_Debug)
 <LI><a href="#[b0]">iDMAUSBArbSizeSet</a> from usbdma.o(i.iDMAUSBArbSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[b1]">iDMAUSBChannelAllocate</a> from usbdma.o(i.iDMAUSBChannelAllocate) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[b9]">iDMAUSBChannelDisable</a> from usbdma.o(i.iDMAUSBChannelDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[b8]">iDMAUSBChannelEnable</a> from usbdma.o(i.iDMAUSBChannelEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[b5]">iDMAUSBChannelIntDisable</a> from usbdma.o(i.iDMAUSBChannelIntDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[b4]">iDMAUSBChannelIntEnable</a> from usbdma.o(i.iDMAUSBChannelIntEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[b7]">iDMAUSBChannelRelease</a> from usbdma.o(i.iDMAUSBChannelRelease) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[b2]">iDMAUSBChannelStatus</a> from usbdma.o(i.iDMAUSBChannelStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[b3]">iDMAUSBIntStatus</a> from usbdma.o(i.iDMAUSBIntStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[b6]">iDMAUSBTransfer</a> from usbdma.o(i.iDMAUSBTransfer) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[ba]">iDMAUSBUnitSizeSet</a> from usbdma.o(i.iDMAUSBUnitSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9c]">read_UsbUart</a> from drv_usb.o(.text.read_UsbUart) referenced 2 times from drv_usb.o(.text.init_drv_USB)
 <LI><a href="#[a2]">uDMAUSBArbSizeSet</a> from usbdma.o(i.uDMAUSBArbSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a3]">uDMAUSBChannelAllocate</a> from usbdma.o(i.uDMAUSBChannelAllocate) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a4]">uDMAUSBChannelDisable</a> from usbdma.o(i.uDMAUSBChannelDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a5]">uDMAUSBChannelEnable</a> from usbdma.o(i.uDMAUSBChannelEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a7]">uDMAUSBChannelIntDisable</a> from usbdma.o(i.uDMAUSBChannelIntDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a6]">uDMAUSBChannelIntEnable</a> from usbdma.o(i.uDMAUSBChannelIntEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a8]">uDMAUSBChannelRelease</a> from usbdma.o(i.uDMAUSBChannelRelease) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a9]">uDMAUSBChannelStatus</a> from usbdma.o(i.uDMAUSBChannelStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[ab]">uDMAUSBIntStatus</a> from usbdma.o(i.uDMAUSBIntStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[ae]">uDMAUSBTransfer</a> from usbdma.o(i.uDMAUSBTransfer) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[af]">uDMAUSBUnitSizeSet</a> from usbdma.o(i.uDMAUSBUnitSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9e]">write_UsbUart</a> from drv_usb.o(.text.write_UsbUart) referenced 2 times from drv_usb.o(.text.init_drv_USB)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[13d]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[486]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[487]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[488]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[489]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[48a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[13e]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[193]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[140]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[142]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[144]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[145]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[146]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[48b]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[148]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14b]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14c]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[14e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[150]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[152]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[153]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[154]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[156]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[48c]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[158]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[15a]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[15c]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[15e]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[48d]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[16c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[160]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[162]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[48e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[48f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[164]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[490]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[491]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[492]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[166]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[493]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[494]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[167]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[495]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[496]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[497]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[498]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[499]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[49a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[49b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[49c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[49d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[49e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[49f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[4a0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[4a1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[171]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[4a2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[4a3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[4a4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[4a5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[4a6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[4a7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[4a8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[13c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[4a9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[169]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4aa]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[16d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; init_Drivers &rArr; init_drv_Sensors &rArr; delay &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4ab]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1a5]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[170]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4ac]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[172]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[174]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
</UL>

<P><STRONG><a name="[3f6]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[4ad]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[3f8]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[4ae]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[4af]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[4b0]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPIOA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIOB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIOC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>GPIOD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPIOE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PMW0_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PWM0_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PWM0_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWM0_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>QEI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC0SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC0SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC0SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC0SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>WDT0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>COMP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>COMP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>COMP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SYSCTL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FLASH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIOF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPIOG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPIOH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SSI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>QEI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>HIB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USB0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PWM0_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UDMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UDMAERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC1SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC1SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ADC1SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ADC1SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIOJ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPIOK_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIOL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SSI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SSI3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>UART7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WTIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WTIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WTIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WTIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WTIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WTIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WTIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>WTIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>WTIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>WTIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>WTIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>WTIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIOM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPION_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>QEI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOP3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOP4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOP5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOP6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOP7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOQ0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOQ1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOQ2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOQ3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOQ4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOQ5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOQ6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOQ7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIOR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIOS_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PMW1_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>PWM1_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>PWM1_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_tm4c123.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4b1]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_enter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_enter
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_enter
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_enter
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_enter
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_enter
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_enter
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_enter
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_enter
</UL>

<P><STRONG><a name="[178]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_exit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_exit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_exit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_exit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_exit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_exit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_exit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_exit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_exit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[179]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
</UL>

<P><STRONG><a name="[3db]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
</UL>

<P><STRONG><a name="[200]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_Logo
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_push_length
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_pop_length
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_pop_length
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_pack_chan
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_debug_vect_pack_chan
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_pack_chan
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_protocol_version_pack_chan
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_local_position_ned_pack_chan
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_attitude_quaternion_pack_chan
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_attitude_pack_chan
</UL>

<P><STRONG><a name="[17b]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4b2]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_Update
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[4b3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_ClearLines
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_Clear
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>

<P><STRONG><a name="[17d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[4b6]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[353]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
</UL>

<P><STRONG><a name="[4b7]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2b5]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Params_Find
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[4b8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4b9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4ba]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4bb]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4bc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4bd]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4bf]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[180]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[163]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[182]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4c1]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[185]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[187]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[188]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[189]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[18a]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[186]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[149]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[13f]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[17a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[80]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[18d]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[151]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[190]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[14d]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[155]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[191]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[14f]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[157]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[141]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[18c]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[4c2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[4c4]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4c5]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[4c6]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[18b]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[199]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[19c]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[19d]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[159]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[15b]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[19e]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[15d]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[15f]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[19f]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[18e]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[181]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[16a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1a0]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[165]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[19b]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[195]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a2]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sig_exit &rArr; _sys_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1a1]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1a6]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[1aa]"></a>Altitude_Control_Disable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ctrl_position.o(.text.Altitude_Control_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Altitude_Control_Disable &rArr; Position_Control_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_exit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_exit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable
</UL>

<P><STRONG><a name="[1ac]"></a>Altitude_Control_Enable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ctrl_position.o(.text.Altitude_Control_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Altitude_Control_Enable &rArr; Attitude_Control_Enable &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_Measurement_System_Status
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_enter
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_enter
</UL>

<P><STRONG><a name="[1af]"></a>Attitude_Control_Disable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ctrl_attitude.o(.text.Attitude_Control_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Attitude_Control_Disable &rArr; Altitude_Control_Disable &rArr; Position_Control_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_exit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_exit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_exit
</UL>

<P><STRONG><a name="[1ae]"></a>Attitude_Control_Enable</STRONG> (Thumb, 612 bytes, Stack size 144 bytes, ctrl_attitude.o(.text.Attitude_Control_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Attitude_Control_Enable &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_Measurement_System_Status
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_b
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorT
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ESO_AngularRate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_enter
</UL>

<P><STRONG><a name="[31d]"></a>Attitude_Control_get_Target_Pitch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text.Attitude_Control_get_Target_Pitch))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[31c]"></a>Attitude_Control_get_Target_Roll</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text.Attitude_Control_get_Target_Roll))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[1b8]"></a>Attitude_Control_set_Target_RollPitch</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ctrl_attitude.o(.text.Attitude_Control_set_Target_RollPitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Attitude_Control_set_Target_RollPitch &rArr; safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_MainFunc
</UL>

<P><STRONG><a name="[25e]"></a>Attitude_Control_set_Target_YawRate</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.Attitude_Control_set_Target_YawRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Attitude_Control_set_Target_YawRate
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_MainFunc
</UL>

<P><STRONG><a name="[1ba]"></a>Attitude_Control_set_Target_YawRelative</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ctrl_attitude.o(.text.Attitude_Control_set_Target_YawRelative))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Attitude_Control_set_Target_YawRelative &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[25b]"></a>Attitude_Control_set_Throttle</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.Attitude_Control_set_Throttle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Attitude_Control_set_Throttle
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_MainFunc
</UL>

<P><STRONG><a name="[25d]"></a>Attitude_Control_set_YawLock</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, ctrl_attitude.o(.text.Attitude_Control_set_YawLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Attitude_Control_set_YawLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_MainFunc
</UL>

<P><STRONG><a name="[22e]"></a>Cfg_get_AccelerometerOffset</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, configurations.o(.text.Cfg_get_AccelerometerOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cfg_get_AccelerometerOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate
</UL>

<P><STRONG><a name="[22f]"></a>Cfg_get_AccelerometerSensivitity</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, configurations.o(.text.Cfg_get_AccelerometerSensivitity))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cfg_get_AccelerometerSensivitity
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate
</UL>

<P><STRONG><a name="[2af]"></a>Cfg_get_BatSTVoltage</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, configurations.o(.text.Cfg_get_BatSTVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_BatSTVoltage
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[1a8]"></a>Cfg_get_BatVoltageADCMag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, configurations.o(.text.Cfg_get_BatVoltageADCMag))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Server
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_BatVADCMag
</UL>

<P><STRONG><a name="[2c8]"></a>Cfg_get_Channel_Min</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_get_Channel_Min))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_get_Channel_Min
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_Update
</UL>

<P><STRONG><a name="[2c7]"></a>Cfg_get_Channel_Reflection</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_get_Channel_Reflection))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_get_Channel_Reflection
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_Update
</UL>

<P><STRONG><a name="[2c9]"></a>Cfg_get_Channel_Scale</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_get_Channel_Scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_get_Channel_Scale
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_Update
</UL>

<P><STRONG><a name="[232]"></a>Cfg_get_GyroscopeOffset</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, configurations.o(.text.Cfg_get_GyroscopeOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cfg_get_GyroscopeOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate
</UL>

<P><STRONG><a name="[1c4]"></a>Cfg_get_Horizontal_Calibration</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_get_Horizontal_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cfg_get_Horizontal_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_Airframe_attitude
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[233]"></a>Cfg_get_MagnetometerOffset</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, configurations.o(.text.Cfg_get_MagnetometerOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cfg_get_MagnetometerOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate
</UL>

<P><STRONG><a name="[234]"></a>Cfg_get_MagnetometerSensivitity</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, configurations.o(.text.Cfg_get_MagnetometerSensivitity))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cfg_get_MagnetometerSensivitity
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate
</UL>

<P><STRONG><a name="[2b0]"></a>Cfg_get_MotorFullThrottleRatio</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, configurations.o(.text.Cfg_get_MotorFullThrottleRatio))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_MotorFullThrottleRatio
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throttle_nonlinear_compensation
</UL>

<P><STRONG><a name="[2b1]"></a>Cfg_get_MotorNonlineFactor</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, configurations.o(.text.Cfg_get_MotorNonlineFactor))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_MotorNonlineFactor
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throttle_nonlinear_compensation
</UL>

<P><STRONG><a name="[2b2]"></a>Cfg_get_MotorStartingThrottle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, configurations.o(.text.Cfg_get_MotorStartingThrottle))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_MotorStartingThrottle
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throttle_nonlinear_compensation
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X6_PWM
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X4_PWM
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C4_PWM
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C42_PWM
</UL>

<P><STRONG><a name="[1b5]"></a>Cfg_get_MotorT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, configurations.o(.text.Cfg_get_MotorT))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_MotorT
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
</UL>

<P><STRONG><a name="[2b3]"></a>Cfg_get_RPYCtrl_Pn</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, configurations.o(.text.Cfg_get_RPYCtrl_Pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_YawCtrl_P4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_YawCtrl_P3
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_YawCtrl_P2
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_YawCtrl_P1
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_RollCtrl_P4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_RollCtrl_P3
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_RollCtrl_P2
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_RollCtrl_P1
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_PitchCtrl_P4
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_PitchCtrl_P3
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_PitchCtrl_P2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_PitchCtrl_P1
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[1b3]"></a>Cfg_get_RPYCtrl_TD4Pn</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, configurations.o(.text.Cfg_get_RPYCtrl_TD4Pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_YawCtrl_TD4P4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_YawCtrl_TD4P3
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_YawCtrl_TD4P2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_YawCtrl_TD4P1
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_RollCtrl_TD4P4
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_RollCtrl_TD4P3
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_RollCtrl_TD4P2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_RollCtrl_TD4P1
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_PitchCtrl_TD4P4
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_PitchCtrl_TD4P3
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_PitchCtrl_TD4P2
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_PitchCtrl_TD4P1
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
</UL>

<P><STRONG><a name="[1b6]"></a>Cfg_get_RPYCtrl_b</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, configurations.o(.text.Cfg_get_RPYCtrl_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cfg_get_RPYCtrl_b
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_YawCtrl_b
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_RollCtrl_b
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_PitchCtrl_b
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
</UL>

<P><STRONG><a name="[2b4]"></a>Cfg_get_UAVType</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, configurations.o(.text.Cfg_get_UAVType))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_get_UAVType
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[276]"></a>Cfg_get_WGA</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, configurations.o(.text.Cfg_get_WGA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cfg_get_WGA
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
</UL>

<P><STRONG><a name="[38c]"></a>Cfg_set_initial_AccelerometerOffset</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_set_initial_AccelerometerOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cfg_set_initial_AccelerometerOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[38f]"></a>Cfg_set_initial_AccelerometerSensivitity</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_set_initial_AccelerometerSensivitity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cfg_set_initial_AccelerometerSensivitity
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[35a]"></a>Cfg_set_initial_BatSTVoltage</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_set_initial_BatSTVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_set_initial_BatSTVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[35b]"></a>Cfg_set_initial_BatVoltageADCMag</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_set_initial_BatVoltageADCMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_set_initial_BatVoltageADCMag
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[384]"></a>Cfg_set_initial_Channel_Min</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, configurations.o(.text.Cfg_set_initial_Channel_Min))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cfg_set_initial_Channel_Min
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[383]"></a>Cfg_set_initial_Channel_Reflection</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, configurations.o(.text.Cfg_set_initial_Channel_Reflection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cfg_set_initial_Channel_Reflection
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[385]"></a>Cfg_set_initial_Channel_Scale</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, configurations.o(.text.Cfg_set_initial_Channel_Scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cfg_set_initial_Channel_Scale
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[38d]"></a>Cfg_set_initial_GyroscopeOffset</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_set_initial_GyroscopeOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cfg_set_initial_GyroscopeOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[390]"></a>Cfg_set_initial_GyroscopeSensivitity</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_set_initial_GyroscopeSensivitity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cfg_set_initial_GyroscopeSensivitity
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[34b]"></a>Cfg_set_initial_Horizontal_Calibration</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_set_initial_Horizontal_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cfg_set_initial_Horizontal_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS
</UL>

<P><STRONG><a name="[38e]"></a>Cfg_set_initial_MagnetometerOffset</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_set_initial_MagnetometerOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cfg_set_initial_MagnetometerOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[391]"></a>Cfg_set_initial_MagnetometerSensivitity</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_set_initial_MagnetometerSensivitity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cfg_set_initial_MagnetometerSensivitity
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[358]"></a>Cfg_set_initial_MotorFullThrottleRatio</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_set_initial_MotorFullThrottleRatio))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_set_initial_MotorFullThrottleRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[357]"></a>Cfg_set_initial_MotorNonlineFactor</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_set_initial_MotorNonlineFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_set_initial_MotorNonlineFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[356]"></a>Cfg_set_initial_MotorStartingThrottle</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_set_initial_MotorStartingThrottle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_set_initial_MotorStartingThrottle
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[359]"></a>Cfg_set_initial_MotorT</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_set_initial_MotorT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_set_initial_MotorT
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[35d]"></a>Cfg_set_initial_RPYCtrl_Pn</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, configurations.o(.text.Cfg_set_initial_RPYCtrl_Pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cfg_set_initial_RPYCtrl_Pn
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[35e]"></a>Cfg_set_initial_RPYCtrl_TD4Pn</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, configurations.o(.text.Cfg_set_initial_RPYCtrl_TD4Pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cfg_set_initial_RPYCtrl_TD4Pn
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[35c]"></a>Cfg_set_initial_RPYCtrl_b</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, configurations.o(.text.Cfg_set_initial_RPYCtrl_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cfg_set_initial_RPYCtrl_b
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[355]"></a>Cfg_set_initial_UAVType</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, configurations.o(.text.Cfg_set_initial_UAVType))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Cfg_set_initial_UAVType
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[1d4]"></a>Cfg_update_AccelerometerOffset</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, configurations.o(.text.Cfg_update_AccelerometerOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Cfg_update_AccelerometerOffset &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[1d6]"></a>Cfg_update_AccelerometerSensivitity</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, configurations.o(.text.Cfg_update_AccelerometerSensivitity))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Cfg_update_AccelerometerSensivitity &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[1d7]"></a>Cfg_update_BatSTVoltage</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_update_BatSTVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cfg_update_BatSTVoltage &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_BatSTVoltage
</UL>

<P><STRONG><a name="[1d8]"></a>Cfg_update_BatVoltageADCMag</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_update_BatVoltageADCMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cfg_update_BatVoltageADCMag &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_BatVADCMag
</UL>

<P><STRONG><a name="[1d9]"></a>Cfg_update_Channel_Min</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, configurations.o(.text.Cfg_update_Channel_Min))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Cfg_update_Channel_Min &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_MainFunc
</UL>

<P><STRONG><a name="[1da]"></a>Cfg_update_Channel_Reflection</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, configurations.o(.text.Cfg_update_Channel_Reflection))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Cfg_update_Channel_Reflection &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_MainFunc
</UL>

<P><STRONG><a name="[1db]"></a>Cfg_update_Channel_Scale</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, configurations.o(.text.Cfg_update_Channel_Scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Cfg_update_Channel_Scale &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_MainFunc
</UL>

<P><STRONG><a name="[1dc]"></a>Cfg_update_GyroscopeOffset</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, configurations.o(.text.Cfg_update_GyroscopeOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Cfg_update_GyroscopeOffset &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[1dd]"></a>Cfg_update_Horizontal_Calibration</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, configurations.o(.text.Cfg_update_Horizontal_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Cfg_update_Horizontal_Calibration &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
</UL>

<P><STRONG><a name="[1de]"></a>Cfg_update_MagnetometerOffset</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, configurations.o(.text.Cfg_update_MagnetometerOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Cfg_update_MagnetometerOffset &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
</UL>

<P><STRONG><a name="[1df]"></a>Cfg_update_MagnetometerSensivitity</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, configurations.o(.text.Cfg_update_MagnetometerSensivitity))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Cfg_update_MagnetometerSensivitity &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
</UL>

<P><STRONG><a name="[1e0]"></a>Cfg_update_MotorFullThrottleRatio</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_update_MotorFullThrottleRatio))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cfg_update_MotorFullThrottleRatio &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_MotorFullThrottleRatio
</UL>

<P><STRONG><a name="[1e1]"></a>Cfg_update_MotorNonlineFactor</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_update_MotorNonlineFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cfg_update_MotorNonlineFactor &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_MotorNonlineFactor
</UL>

<P><STRONG><a name="[1e2]"></a>Cfg_update_MotorStartingThrottle</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_update_MotorStartingThrottle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cfg_update_MotorStartingThrottle &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_MotorStartingThrottle
</UL>

<P><STRONG><a name="[1e3]"></a>Cfg_update_MotorT</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_update_MotorT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cfg_update_MotorT &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_MotorT
</UL>

<P><STRONG><a name="[1e4]"></a>Cfg_update_RPYCtrl_Pn</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, configurations.o(.text.Cfg_update_RPYCtrl_Pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_YawCtrl_P4
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_YawCtrl_P3
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_YawCtrl_P2
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_YawCtrl_P1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_RollCtrl_P4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_RollCtrl_P3
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_RollCtrl_P2
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_RollCtrl_P1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_PitchCtrl_P4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_PitchCtrl_P3
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_PitchCtrl_P2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_PitchCtrl_P1
</UL>

<P><STRONG><a name="[1e5]"></a>Cfg_update_RPYCtrl_TD4Pn</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, configurations.o(.text.Cfg_update_RPYCtrl_TD4Pn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_YawCtrl_TD4P4
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_YawCtrl_TD4P3
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_YawCtrl_TD4P2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_YawCtrl_TD4P1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_RollCtrl_TD4P4
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_RollCtrl_TD4P3
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_RollCtrl_TD4P2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_RollCtrl_TD4P1
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_PitchCtrl_TD4P4
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_PitchCtrl_TD4P3
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_PitchCtrl_TD4P2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_PitchCtrl_TD4P1
</UL>

<P><STRONG><a name="[1e6]"></a>Cfg_update_RPYCtrl_b</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, configurations.o(.text.Cfg_update_RPYCtrl_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Cfg_update_RPYCtrl_b &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_YawCtrl_b
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_RollCtrl_b
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_PitchCtrl_b
</UL>

<P><STRONG><a name="[1e7]"></a>Cfg_update_UAVType</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_update_UAVType))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cfg_update_UAVType &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Param_set_UAVType
</UL>

<P><STRONG><a name="[1e8]"></a>Cfg_update_WGA</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, configurations.o(.text.Cfg_update_WGA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Cfg_update_WGA &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd11_MAV_CMD_WRITE_WGA
</UL>

<P><STRONG><a name="[1fc]"></a>FDraw_Clear</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, oledfont.o(.text.FDraw_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FDraw_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[1fe]"></a>FDraw_ClearLines</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, oledfont.o(.text.FDraw_ClearLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FDraw_ClearLines
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_Lines
</UL>

<P><STRONG><a name="[378]"></a>FDraw_Font16x8</STRONG> (Thumb, 350 bytes, Stack size 28 bytes, oledfont.o(.text.FDraw_Font16x8))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FDraw_Font16x8
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[29d]"></a>FDraw_Font8x6</STRONG> (Thumb, 316 bytes, Stack size 28 bytes, oledfont.o(.text.FDraw_Font8x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FDraw_Font8x6
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Str8x6
</UL>

<P><STRONG><a name="[1ff]"></a>FDraw_Logo</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, oledfont.o(.text.FDraw_Logo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FDraw_Logo
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[29c]"></a>FDraw_Point8x6</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, oledfont.o(.text.FDraw_Point8x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FDraw_Point8x6
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Point8x6
</UL>

<P><STRONG><a name="[29e]"></a>FDraw_TickCross8x6</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, oledfont.o(.text.FDraw_TickCross8x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FDraw_TickCross8x6
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_TickCross8x6
</UL>

<P><STRONG><a name="[203]"></a>Filter_Butter2_LP_float_setCutoffFrequency</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, filters_butter.o(.text.Filter_Butter2_LP_float_setCutoffFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Filter_Butter2_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq_f
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP_float_init
</UL>

<P><STRONG><a name="[1c8]"></a>Filter_Butter4_LP_float_setCutoffFrequency</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, filters_butter.o(.text.Filter_Butter4_LP_float_setCutoffFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Filter_Butter4_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq_f
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[20d]"></a>Filter_Butter8_LP_float_setCutoffFrequency</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, filters_butter.o(.text.Filter_Butter8_LP_float_setCutoffFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Filter_Butter8_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq_f
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter8_LP_float_init
</UL>

<P><STRONG><a name="[246]"></a>GetAccelerometer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sensors.o(.text.GetAccelerometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetAccelerometer
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[247]"></a>GetGyroscope</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sensors.o(.text.GetGyroscope))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetGyroscope
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[1c3]"></a>GetMagnetometer</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sensors.o(.text.GetMagnetometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetMagnetometer
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[1bc]"></a>GetPositionSensor</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sensors.o(.text.GetPositionSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPositionSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Estimated_Sensor_Position_z
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; PWM_PullDownAll
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[22c]"></a>IMUAccelerometerRegister</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, sensors.o(.text.IMUAccelerometerRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IMUAccelerometerRegister &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[223]"></a>IMUAccelerometerUpdate</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, sensors.o(.text.IMUAccelerometerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IMUAccelerometerUpdate &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_AccelerometerSensivitity
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_AccelerometerOffset
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
</UL>

<P><STRONG><a name="[231]"></a>IMUGyroscopeRegister</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, sensors.o(.text.IMUGyroscopeRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IMUGyroscopeRegister &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[224]"></a>IMUGyroscopeUpdate</STRONG> (Thumb, 334 bytes, Stack size 80 bytes, sensors.o(.text.IMUGyroscopeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = IMUGyroscopeUpdate &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_GyroscopeOffset
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
</UL>

<P><STRONG><a name="[22b]"></a>IMUMagnetometerRegister</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, sensors.o(.text.IMUMagnetometerRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IMUMagnetometerRegister &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Transfered_Handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[229]"></a>IMUMagnetometerUnRegister</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, sensors.o(.text.IMUMagnetometerUnRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IMUMagnetometerUnRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Transfered_Handler
</UL>

<P><STRONG><a name="[22a]"></a>IMUMagnetometerUpdate</STRONG> (Thumb, 370 bytes, Stack size 88 bytes, sensors.o(.text.IMUMagnetometerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IMUMagnetometerUpdate &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MagnetometerSensivitity
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MagnetometerOffset
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Transfered_Handler
</UL>

<P><STRONG><a name="[244]"></a>Led_setProgress</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, drv_led.o(.text.Led_setProgress))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Led_setProgress
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_enter
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_enter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_enter
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_MainFunc
</UL>

<P><STRONG><a name="[23c]"></a>Led_setSignal</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, drv_led.o(.text.Led_setSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Led_setSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_MainFunc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_enter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_MainFunc
</UL>

<P><STRONG><a name="[23d]"></a>Led_setStatus</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, drv_led.o(.text.Led_setStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Led_setStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_enter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_enter
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_enter
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_enter
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_enter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_enter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_MainFunc
</UL>

<P><STRONG><a name="[275]"></a>MS_Attitude</STRONG> (Thumb, 7572 bytes, Stack size 192 bytes, ms_attitude.o(.text.MS_Attitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = MS_Attitude &rArr; Attitude_Heading_Correction &rArr; Quaternion_rotate_delta_angle &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntEnable
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateCtrl
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationFilted
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_constrain
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate_delta_angle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_reverse_rotate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Mult
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Integral_Runge1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_WGA
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_Horizontal_Calibration
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntDisable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_attitude
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_acceleration
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp__fabsf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
</UL>

<P><STRONG><a name="[1eb]"></a>MS_Attitude_WGA</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_attitude.o(.text.MS_Attitude_WGA))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA
</UL>

<P><STRONG><a name="[1e9]"></a>MS_Attitude_get_WGA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ms_attitude.o(.text.MS_Attitude_get_WGA))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA
</UL>

<P><STRONG><a name="[27f]"></a>MS_Position</STRONG> (Thumb, 12416 bytes, Stack size 264 bytes, ms_position.o(.text.MS_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = MS_Position &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_isValid
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Measurement_System_Status
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_Measurement_System_Status
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_setCutoffFrequency
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_reverse_rotate_axis_z
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_WGA
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_attitude
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionKalmanFilter_run_s_svb
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionKalmanFilter_run_s_sv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp__fabsf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
</UL>

<P><STRONG><a name="[1ec]"></a>MS_Position_WGA</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text.MS_Position_WGA))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA
</UL>

<P><STRONG><a name="[1ea]"></a>MS_Position_get_WGA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ms_position.o(.text.MS_Position_get_WGA))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA
</UL>

<P><STRONG><a name="[284]"></a>MS_main</STRONG> (Thumb, 532 bytes, Stack size 112 bytes, ms_main.o(.text.MS_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = MS_main &rArr; MS_Attitude &rArr; Attitude_Heading_Correction &rArr; Quaternion_rotate_delta_angle &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter8_LP_float_run
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_run
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMCHandler
</UL>

<P><STRONG><a name="[23f]"></a>OLED_Clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_oled.o(.text.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_Clear &rArr; FDraw_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_exit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_enter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_exit
</UL>

<P><STRONG><a name="[298]"></a>OLED_Clear_Lines</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_oled.o(.text.OLED_Clear_Lines))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Clear_Lines &rArr; FDraw_ClearLines
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_ClearLines
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_init
</UL>

<P><STRONG><a name="[29b]"></a>OLED_Draw_Point8x6</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_oled.o(.text.OLED_Draw_Point8x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_Draw_Point8x6 &rArr; FDraw_Point8x6
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_Point8x6
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
</UL>

<P><STRONG><a name="[23e]"></a>OLED_Draw_Str8x6</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, drv_oled.o(.text.OLED_Draw_Str8x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Draw_Str8x6 &rArr; FDraw_Font8x6
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_Font8x6
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_enter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_enter
</UL>

<P><STRONG><a name="[23a]"></a>OLED_Draw_TickCross8x6</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, drv_oled.o(.text.OLED_Draw_TickCross8x6))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Draw_TickCross8x6 &rArr; FDraw_TickCross8x6
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_TickCross8x6
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_enter
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_MainFunc
</UL>

<P><STRONG><a name="[240]"></a>OLED_Screen_BasicInf_Refresh</STRONG> (Thumb, 748 bytes, Stack size 168 bytes, oled_screens.o(.text.OLED_Screen_BasicInf_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = OLED_Screen_BasicInf_Refresh &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Receiver
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_TickCross8x6
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Str8x6
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Point8x6
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryVoltage
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Measurement_System_Status
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getRoll
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getPitch
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_MainFunc
</UL>

<P><STRONG><a name="[242]"></a>OLED_Screen_BasicInf_init</STRONG> (Thumb, 264 bytes, Stack size 88 bytes, oled_screens.o(.text.OLED_Screen_BasicInf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = OLED_Screen_BasicInf_init &rArr; OLED_Screen_BasicInf_Refresh &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_TickCross8x6
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Str8x6
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear_Lines
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_enter
</UL>

<P><STRONG><a name="[23b]"></a>OLED_Update</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, drv_oled.o(.text.OLED_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Update &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DC_LOW
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_exit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_enter
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_MainFunc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_enter
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_MainFunc
</UL>

<P><STRONG><a name="[2ae]"></a>PWM_Out</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, drv_pwmout.o(.text.PWM_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PWM_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X6_PWM
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X4_PWM
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C4_PWM
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C42_PWM
</UL>

<P><STRONG><a name="[21d]"></a>PWM_PullDownAll</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, drv_pwmout.o(.text.PWM_PullDownAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_PullDownAll
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X6_PWM
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X4_PWM
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C4_PWM
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C42_PWM
</UL>

<P><STRONG><a name="[28e]"></a>Params_Find</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, configurations.o(.text.Params_Find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Params_Find &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET
</UL>

<P><STRONG><a name="[2b6]"></a>PortRegister</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, commulink.o(.text.PortRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PortRegister &rArr; mavlink_set_proto_version &rArr; mavlink_get_channel_status
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_set_proto_version
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
</UL>

<P><STRONG><a name="[214]"></a>PositionSensorChangeDataType</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, sensors.o(.text.PositionSensorChangeDataType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PositionSensorChangeDataType
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
</UL>

<P><STRONG><a name="[21b]"></a>PositionSensorRegister</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, sensors.o(.text.PositionSensorRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = PositionSensorRegister &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server
</UL>

<P><STRONG><a name="[216]"></a>PositionSensorSetInavailable</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, sensors.o(.text.PositionSensorSetInavailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = PositionSensorSetInavailable &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_isValid
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
</UL>

<P><STRONG><a name="[21c]"></a>PositionSensorUnRegister</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, sensors.o(.text.PositionSensorUnRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PositionSensorUnRegister &rArr; GetPositionSensor
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server
</UL>

<P><STRONG><a name="[228]"></a>PositionSensorUpdatePosition</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, sensors.o(.text.PositionSensorUpdatePosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = PositionSensorUpdatePosition &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_isValid
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>

<P><STRONG><a name="[215]"></a>PositionSensorUpdatePositionGlobalVel</STRONG> (Thumb, 1160 bytes, Stack size 152 bytes, sensors.o(.text.PositionSensorUpdatePositionGlobalVel))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = PositionSensorUpdatePositionGlobalVel &rArr; map_projection_init &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_isValid
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
</UL>

<P><STRONG><a name="[2a9]"></a>PositionSensorUpdateVel</STRONG> (Thumb, 564 bytes, Stack size 64 bytes, sensors.o(.text.PositionSensorUpdateVel))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = PositionSensorUpdateVel &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_isValid
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Handler
</UL>

<P><STRONG><a name="[1ab]"></a>Position_Control_Disable</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, ctrl_position.o(.text.Position_Control_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Position_Control_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable
</UL>

<P><STRONG><a name="[260]"></a>Position_Control_Enable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ctrl_position.o(.text.Position_Control_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Position_Control_Enable &rArr; Altitude_Control_Enable &rArr; Attitude_Control_Enable &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Measurement_System_Status
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[26e]"></a>Position_Control_Takeoff_HeightRelative</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ctrl_position.o(.text.Position_Control_Takeoff_HeightRelative))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Position_Control_Takeoff_HeightRelative
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[2be]"></a>Position_Control_set_TargetPositionXY</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, ctrl_position.o(.text.Position_Control_set_TargetPositionXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Position_Control_set_TargetPositionXY
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyHeading
</UL>

<P><STRONG><a name="[271]"></a>Position_Control_set_TargetPositionXYRelativeBodyHeading</STRONG> (Thumb, 192 bytes, Stack size 64 bytes, ctrl_position.o(.text.Position_Control_set_TargetPositionXYRelativeBodyHeading))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_set_TargetPositionXYRelativeBodyHeading &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[2bf]"></a>Position_Control_set_TargetPositionZ</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ctrl_position.o(.text.Position_Control_set_TargetPositionZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Position_Control_set_TargetPositionZ
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative
</UL>

<P><STRONG><a name="[272]"></a>Position_Control_set_TargetPositionZRelative</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ctrl_position.o(.text.Position_Control_set_TargetPositionZRelative))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Position_Control_set_TargetPositionZRelative &rArr; Position_Control_set_TargetPositionZ
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[270]"></a>Position_Control_set_TargetVelocityBodyHeadingXY</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, ctrl_position.o(.text.Position_Control_set_TargetVelocityBodyHeadingXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Position_Control_set_TargetVelocityBodyHeadingXY &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[269]"></a>Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, ctrl_position.o(.text.Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[267]"></a>Position_Control_set_TargetVelocityZ</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ctrl_position.o(.text.Position_Control_set_TargetVelocityZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Position_Control_set_TargetVelocityZ
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[268]"></a>Position_Control_set_XYLock</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, ctrl_position.o(.text.Position_Control_set_XYLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Position_Control_set_XYLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[265]"></a>Position_Control_set_ZLock</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, ctrl_position.o(.text.Position_Control_set_ZLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Position_Control_set_ZLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[27e]"></a>Quaternion_Integral_Runge1</STRONG> (Thumb, 436 bytes, Stack size 112 bytes, quaternion.o(.text.Quaternion_Integral_Runge1))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Quaternion_Integral_Runge1 &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
</UL>

<P><STRONG><a name="[1c5]"></a>Quaternion_Mult</STRONG> (Thumb, 428 bytes, Stack size 104 bytes, quaternion.o(.text.Quaternion_Mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_Airframe_attitude
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_attitude
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[291]"></a>Quaternion_getPitch</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, quaternion.o(.text.Quaternion_getPitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Quaternion_getPitch &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE
</UL>

<P><STRONG><a name="[290]"></a>Quaternion_getRoll</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, quaternion.o(.text.Quaternion_getRoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Quaternion_getRoll &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE
</UL>

<P><STRONG><a name="[1b2]"></a>Quaternion_getYaw</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, quaternion.o(.text.Quaternion_getYaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyHeading
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
</UL>

<P><STRONG><a name="[259]"></a>Quaternion_get_PRQuat</STRONG> (Thumb, 354 bytes, Stack size 120 bytes, quaternion.o(.text.Quaternion_get_PRQuat))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Quaternion_get_PRQuat &rArr; safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_f
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
</UL>

<P><STRONG><a name="[2c3]"></a>Quaternion_get_Rotation_vec</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, quaternion.o(.text.Quaternion_get_Rotation_vec))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Quaternion_get_Rotation_vec &rArr; safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_f
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[2c0]"></a>Quaternion_normalize</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, quaternion.o(.text.Quaternion_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate_delta_angle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Mult
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Integral_Runge1
</UL>

<P><STRONG><a name="[279]"></a>Quaternion_reverse_rotate</STRONG> (Thumb, 506 bytes, Stack size 80 bytes, quaternion.o(.text.Quaternion_reverse_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Quaternion_reverse_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_acceleration
</UL>

<P><STRONG><a name="[281]"></a>Quaternion_reverse_rotate_axis_z</STRONG> (Thumb, 274 bytes, Stack size 68 bytes, quaternion.o(.text.Quaternion_reverse_rotate_axis_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Quaternion_reverse_rotate_axis_z
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
</UL>

<P><STRONG><a name="[1bf]"></a>Quaternion_rotate</STRONG> (Thumb, 530 bytes, Stack size 80 bytes, quaternion.o(.text.Quaternion_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Quaternion_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[3df]"></a>Quaternion_rotate_axis_z</STRONG> (Thumb, 274 bytes, Stack size 68 bytes, quaternion.o(.text.Quaternion_rotate_axis_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Quaternion_rotate_axis_z
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[1c9]"></a>Quaternion_rotate_delta_angle</STRONG> (Thumb, 636 bytes, Stack size 160 bytes, quaternion.o(.text.Quaternion_rotate_delta_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Quaternion_rotate_delta_angle &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_normalize
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_square
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_f
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[2ad]"></a>Receiver_Update</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, receiver.o(.text.Receiver_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Receiver_Update &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_Channel_Scale
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_Channel_Reflection
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_Channel_Min
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_range_float
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sbus_Receive_Handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Receive_Handler
</UL>

<P><STRONG><a name="[332]"></a>STS_Add_Task</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, sts.o(.text.STS_Add_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STS_Add_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Debug
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_CommuLink
</UL>

<P><STRONG><a name="[2e4]"></a>STS_Change_Task_Mode</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, sts.o(.text.STS_Change_Task_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = STS_Change_Task_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
</UL>

<P><STRONG><a name="[2d5]"></a>STS_Run</STRONG> (Thumb, 440 bytes, Stack size 72 bytes, sts.o(.text.STS_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = STS_Run &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28d]"></a>Send_Param_List</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, commulink.o(.text.Send_Param_List))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST
</UL>

<P><STRONG><a name="[297]"></a>SetMsgRate</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, commulink.o(.text.SetMsgRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetMsgRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg66_REQUEST_DATA_STREAM
</UL>

<P><STRONG><a name="[7e]"></a>SystemInit</STRONG> (Thumb, 268 bytes, Stack size 4 bytes, system_tm4c123.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(.text)
</UL>
<P><STRONG><a name="[1c6]"></a>Time_isValid</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, basic.o(.text.Time_isValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Time_isValid
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[1c7]"></a>Time_set_inValid</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, basic.o(.text.Time_set_inValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Time_set_inValid
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Server
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_enter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[2d2]"></a>UART2_DataAvailable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_uart2.o(.text.UART2_DataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_DataAvailable &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_get_Bytes2read
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_RCTrigger
</UL>

<P><STRONG><a name="[0]"></a>USBDControlHandler</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, drv_usb.o(.text.USBDControlHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBDControlHandler &rArr; USBBufferFlush &rArr; USBRingBufFlush &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferFlush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_def.o(.data.g_sCDCDevice)
</UL>
<P><STRONG><a name="[2]"></a>USBDRxHandler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drv_usb.o(.text.USBDRxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBDRxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_def.o(.data.g_sRxBuffer)
</UL>
<P><STRONG><a name="[5]"></a>USBDTxHandler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_usb.o(.text.USBDTxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBDTxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_def.o(.data.g_sTxBuffer)
</UL>
<P><STRONG><a name="[26c]"></a>Uart2_Send</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, drv_uart2.o(.text.Uart2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Uart2_Send &rArr; RingBuf_uint8_t_push_length &rArr; RingBuf_uint8_t_get_Freesize
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_push_length
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_pop_DMABuf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_get_Freesize
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelSizeGet
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelIsEnabled
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[2d1]"></a>Uart3_DataAvailable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_sdi.o(.text.Uart3_DataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart3_DataAvailable &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_RCTrigger
</UL>

<P><STRONG><a name="[9d]"></a>UsbUart_DataAvailable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usb.o(.text.UsbUart_DataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsbUart_DataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferDataAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text.init_drv_USB)
</UL>
<P><STRONG><a name="[173]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, main.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1a7]"></a>_ttywrch</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, main.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[261]"></a>arm_sin_cos_f32</STRONG> (Thumb, 732 bytes, Stack size 56 bytes, controllerfunctions.o(.text.arm_sin_cos_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arm_sin_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate_delta_angle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyHeading
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[302]"></a>arm_sin_f32</STRONG> (Thumb, 256 bytes, Stack size 36 bytes, fastmathfunctions.o(.text.arm_sin_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[1f1]"></a>change_Mode</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, modes.o(.text.change_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = change_Mode &rArr; STS_Change_Task_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Change_Task_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_MainFunc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_MainFunc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd176_MAV_CMD_DO_SET_MODE
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_MainFunc
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_enter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_MainFunc
</UL>

<P><STRONG><a name="[2fb]"></a>ctrl_Attitude</STRONG> (Thumb, 3972 bytes, Stack size 872 bytes, ctrl_attitude.o(.text.ctrl_Attitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = ctrl_Attitude &rArr; ctrl_Attitude_MultiRotor_C42_PWM &rArr; update_output_throttle &rArr; get_history_Airframe_attitude &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryVoltage
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateCtrl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_get_Rotation_vec
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_get_PRQuat
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Mult
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_UAVType
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_b
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorStartingThrottle
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_BatSTVoltage
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_subtract
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_plus
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_mult
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_symmetry_range_float
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_QuaternionEf
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Quaternion
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X6_PWM
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X4_PWM
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C4_PWM
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C42_PWM
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_track4
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_track3
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_conjugate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP_float_run
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate_run
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate_get_EsMainPower
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate_get_EsDisturbance
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate_get_EsAngularRate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate_get_EsAngularAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_main
</UL>

<P><STRONG><a name="[313]"></a>ctrl_Position</STRONG> (Thumb, 3860 bytes, Stack size 336 bytes, ctrl_position.o(.text.ctrl_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ctrl_Position &rArr; TD4_track4
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lean_angle_cosin
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Measurement_System_Status
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationCtrl
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorStartingThrottle
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance_y
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance_x
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_symmetry_range_float
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_vector2_float
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_range_float
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_track4
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_track3
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_reset
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_run
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Target_Throttle
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_Roll
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_Pitch
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_main
</UL>

<P><STRONG><a name="[287]"></a>ctrl_main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctrl_main.o(.text.ctrl_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = ctrl_main &rArr; ctrl_Attitude &rArr; ctrl_Attitude_MultiRotor_C42_PWM &rArr; update_output_throttle &rArr; get_history_Airframe_attitude &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMCHandler
</UL>

<P><STRONG><a name="[322]"></a>delay</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, basic.o(.text.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = delay &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[2a1]"></a>getBatteryVoltage</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_adc.o(.text.getBatteryVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[314]"></a>get_AccelerationCtrl</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ms_main.o(.text.get_AccelerationCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_AccelerationCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[285]"></a>get_AccelerationENU</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ms_position.o(.text.get_AccelerationENU))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
</UL>

<P><STRONG><a name="[24a]"></a>get_AccelerationFilted</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ms_main.o(.text.get_AccelerationFilted))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_AccelerationFilted
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[1b1]"></a>get_Airframe_attitude</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ms_attitude.o(.text.get_Airframe_attitude))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lean_angle_cosin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyHeading
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
</UL>

<P><STRONG><a name="[26f]"></a>get_Altitude_ControlMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctrl_position.o(.text.get_Altitude_ControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[1ad]"></a>get_Altitude_Measurement_System_Status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_main.o(.text.get_Altitude_Measurement_System_Status))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_MainFunc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable
</UL>

<P><STRONG><a name="[24b]"></a>get_AngularRateCtrl</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ms_main.o(.text.get_AngularRateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_AngularRateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[1b0]"></a>get_Attitude_Measurement_System_Status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_main.o(.text.get_Attitude_Measurement_System_Status))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M00_init_MainFunc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
</UL>

<P><STRONG><a name="[31e]"></a>get_Estimated_Sensor_Position_z</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ms_position.o(.text.get_Estimated_Sensor_Position_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_Estimated_Sensor_Position_z &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
</UL>

<P><STRONG><a name="[1ed]"></a>get_Port</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, commulink.o(.text.get_Port))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_Port
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA
</UL>

<P><STRONG><a name="[294]"></a>get_Position</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ms_position.o(.text.get_Position))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyHeading
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY
</UL>

<P><STRONG><a name="[273]"></a>get_Position_ControlMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctrl_position.o(.text.get_Position_ControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[25f]"></a>get_Position_Control_Enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctrl_position.o(.text.get_Position_Control_Enabled))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[26b]"></a>get_Position_Measurement_System_Status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_main.o(.text.get_Position_Measurement_System_Status))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable
</UL>

<P><STRONG><a name="[243]"></a>get_Receiver</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, receiver.o(.text.get_Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_Receiver
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_enter
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_MainFunc
</UL>

<P><STRONG><a name="[2c6]"></a>get_Receiver_NC</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, receiver.o(.text.get_Receiver_NC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_Receiver_NC
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Check_Server
</UL>

<P><STRONG><a name="[28f]"></a>get_System_Run_Time</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, basic.o(.text.get_System_Run_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_System_Run_Time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE
</UL>

<P><STRONG><a name="[211]"></a>get_TIME_now</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, basic.o(.text.get_TIME_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Run
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Server
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Server
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_System_Run_Time
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
</UL>

<P><STRONG><a name="[31a]"></a>get_Target_Throttle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text.get_Target_Throttle))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[295]"></a>get_VelocityENU</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ms_position.o(.text.get_VelocityENU))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[262]"></a>get_WindDisturbance_x</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text.get_WindDisturbance_x))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[263]"></a>get_WindDisturbance_y</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text.get_WindDisturbance_y))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[258]"></a>get_attitude</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ms_attitude.o(.text.get_attitude))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
</UL>

<P><STRONG><a name="[1f0]"></a>get_current_Mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modes.o(.text.get_current_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd176_MAV_CMD_DO_SET_MODE
</UL>

<P><STRONG><a name="[241]"></a>get_current_Receiver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, receiver.o(.text.get_current_Receiver))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M01_Ground_MainFunc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_MainFunc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X6_PWM
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X4_PWM
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C4_PWM
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C42_PWM
</UL>

<P><STRONG><a name="[245]"></a>get_current_Receiver_Type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, receiver.o(.text.get_current_Receiver_Type))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib_enter
</UL>

<P><STRONG><a name="[323]"></a>get_history_Airframe_attitude</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ms_attitude.o(.text.get_history_Airframe_attitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = get_history_Airframe_attitude &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Mult
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_Horizontal_Calibration
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_attitude
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[1be]"></a>get_history_acceleration</STRONG> (Thumb, 448 bytes, Stack size 28 bytes, ms_attitude.o(.text.get_history_acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = get_history_acceleration &rArr; Quaternion_reverse_rotate
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_reverse_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[1bd]"></a>get_history_attitude</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, ms_attitude.o(.text.get_history_attitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Mult
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_Airframe_attitude
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[319]"></a>get_hover_throttle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text.get_hover_throttle))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[26d]"></a>get_is_inFlight</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ctrl_attitude.o(.text.get_is_inFlight))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[318]"></a>get_lean_angle_cosin</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ms_main.o(.text.get_lean_angle_cosin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_lean_angle_cosin
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[212]"></a>get_pass_time</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, basic.o(.text.get_pass_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Run
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Check_Server
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Estimated_Sensor_Position_z
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
</UL>

<P><STRONG><a name="[22d]"></a>get_pass_time_st</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, basic.o(.text.get_pass_time_st))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Run
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_Update
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sbus_Receive_Handler
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate
</UL>

<P><STRONG><a name="[327]"></a>init_Basic</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, basic.o(.text.init_Basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = init_Basic &rArr; delay &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntRegister
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPULazyStackingEnable
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPUEnable
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[331]"></a>init_CommuLink</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, commulink.o(.text.init_CommuLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_CommuLink &rArr; STS_Add_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Add_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[333]"></a>init_Configurations</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, configurations.o(.text.init_Configurations))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = init_Configurations &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMRead
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[335]"></a>init_ControlSystem</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctrl_main.o(.text.init_ControlSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = init_ControlSystem &rArr; init_ctrl_Attitude &rArr; Filter_Butter2_LP_float_init &rArr; Filter_Butter2_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Position
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[338]"></a>init_Debug</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, debug.o(.text.init_Debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_Debug &rArr; STS_Add_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Add_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[339]"></a>init_Drivers</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_main.o(.text.init_Drivers))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = init_Drivers &rArr; init_drv_Sensors &rArr; delay &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_uDMA
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[348]"></a>init_MS</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, ms_main.o(.text.init_MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = init_MS &rArr; init_MS_Attitude &rArr; Filter_Butter4_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter8_LP_float_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_Horizontal_Calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[349]"></a>init_MS_Attitude</STRONG> (Thumb, 1704 bytes, Stack size 72 bytes, ms_attitude.o(.text.init_MS_Attitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = init_MS_Attitude &rArr; Filter_Butter4_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralDisable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_setCutoffFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS
</UL>

<P><STRONG><a name="[34a]"></a>init_MS_Position</STRONG> (Thumb, 1248 bytes, Stack size 64 bytes, ms_position.o(.text.init_MS_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = init_MS_Position &rArr; delay &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralDisable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS
</UL>

<P><STRONG><a name="[354]"></a>init_Modes</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, modes.o(.text.init_Modes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_Modes &rArr; STS_Add_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Add_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[336]"></a>init_ctrl_Attitude</STRONG> (Thumb, 528 bytes, Stack size 64 bytes, ctrl_attitude.o(.text.init_ctrl_Attitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = init_ctrl_Attitude &rArr; Filter_Butter2_LP_float_init &rArr; Filter_Butter2_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_UAVType
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_RPYCtrl_b
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_RPYCtrl_TD4Pn
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_RPYCtrl_Pn
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_MotorT
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_MotorStartingThrottle
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_MotorNonlineFactor
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_MotorFullThrottleRatio
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_BatVoltageADCMag
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_BatSTVoltage
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP_float_init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h_init
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem
</UL>

<P><STRONG><a name="[337]"></a>init_ctrl_Position</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ctrl_position.o(.text.init_ctrl_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = init_ctrl_Position &rArr; Filter_Butter4_LP_float_init &rArr; Filter_Butter4_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_init
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem
</UL>

<P><STRONG><a name="[347]"></a>init_drv_ADC</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, drv_adc.o(.text.init_drv_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_drv_ADC &rArr; GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Add_Task
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceStepConfigure
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceEnable
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCSequenceConfigure
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCHardwareOversampleConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[364]"></a>init_drv_EEPROM</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_eeprom.o(.text.init_drv_EEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_drv_EEPROM &rArr; EEPROMInit &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[343]"></a>init_drv_GPS</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, drv_gps.o(.text.init_drv_GPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_drv_GPS &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Add_Task
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOEnable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[33b]"></a>init_drv_LED</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, drv_led.o(.text.init_drv_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = init_drv_LED &rArr; GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Add_Task
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Red
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Green
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blue
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[33c]"></a>init_drv_OLED</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, drv_oled.o(.text.init_drv_OLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = init_drv_OLED &rArr; delay &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAssign
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntRegister
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDMAEnable
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_Logo
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDraw_Font16x8
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Cmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_RST_LOW
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_RST_HIGH
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[342]"></a>init_drv_OpticalFlow</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, drv_opticalflow.o(.text.init_drv_OpticalFlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = init_drv_OpticalFlow &rArr; PositionSensorRegister &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOEnable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[33d]"></a>init_drv_PWMOut</STRONG> (Thumb, 438 bytes, Stack size 64 bytes, drv_pwmout.o(.text.init_drv_PWMOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = init_drv_PWMOut &rArr; GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPWMClockSet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenPeriodSet
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenEnable
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMGenConfigure
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[340]"></a>init_drv_Receiver</STRONG> (Thumb, 608 bytes, Stack size 168 bytes, drv_receiver.o(.text.init_drv_Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = init_drv_Receiver &rArr; Receiver_Update &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Add_Task
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOLevelSet
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOEnable
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerPrescaleSet
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_Update
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_Channel_Scale
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_Channel_Reflection
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_Channel_Min
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[345]"></a>init_drv_SDI</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, drv_sdi.o(.text.init_drv_SDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = init_drv_SDI &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Add_Task
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAssign
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDMAEnable
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_init
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[346]"></a>init_drv_SDI2</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_sdi2.o(.text.init_drv_SDI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_drv_SDI2 &rArr; STS_Add_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Add_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[33e]"></a>init_drv_Sensors</STRONG> (Thumb, 1660 bytes, Stack size 216 bytes, drv_sensors.o(.text.init_drv_Sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = init_drv_Sensors &rArr; delay &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_temperature_rateset
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_pressure_rateset
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ReadData
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralDisable
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntEnable
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntRegister
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_MagnetometerSensivitity
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_MagnetometerOffset
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_GyroscopeSensivitity
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_GyroscopeOffset
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_AccelerometerSensivitity
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_set_initial_AccelerometerOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[33f]"></a>init_drv_USB</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, drv_usb.o(.text.init_drv_USB))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = init_drv_USB &rArr; delay &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBStackModeSet
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCInit
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferInit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[344]"></a>init_drv_Uart2</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, drv_uart2.o(.text.init_drv_Uart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = init_drv_Uart2 &rArr; GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOEnable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAssign
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDMAEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[341]"></a>init_drv_Ultrasonic</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, drv_ultrasonic.o(.text.init_drv_Ultrasonic))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = init_drv_Ultrasonic &rArr; PositionSensorRegister &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinConfigure
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOEnable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[33a]"></a>init_drv_uDMA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_udma.o(.text.init_drv_uDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_drv_uDMA
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAEnable
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAControlBaseSet
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
</UL>

<P><STRONG><a name="[16e]"></a>main</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = main &rArr; init_Drivers &rArr; init_drv_Sensors &rArr; delay &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_EEPROM
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Drivers
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Debug
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Configurations
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_CommuLink
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2d4]"></a>read_UART2</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_uart2.o(.text.read_UART2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_UART2 &rArr; RingBuf_uint8_t_pop_length &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_pop_length
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Server
</UL>

<P><STRONG><a name="[2d3]"></a>read_Uart3</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, drv_sdi.o(.text.read_Uart3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_Uart3 &rArr; RingBuf_uint8_t_pop_length &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_pop_length
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDI_Server
</UL>

<P><STRONG><a name="[9c]"></a>read_UsbUart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, drv_usb.o(.text.read_UsbUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = read_UsbUart &rArr; USBBufferRead &rArr; USBRingBufRead &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text.init_drv_USB)
</UL>
<P><STRONG><a name="[274]"></a>static_write_uart1</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, drv_opticalflow.o(.text.static_write_uart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = static_write_uart1
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[1ca]"></a>vector3_float_constrain</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, vector_3.o(.text.vector3_float_constrain))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vector3_float_constrain &rArr; vector3_float_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_square
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_mult
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[9e]"></a>write_UsbUart</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, drv_usb.o(.text.write_UsbUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_UsbUart &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text.init_drv_USB)
</UL>
<P><STRONG><a name="[196]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3e4]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[3e3]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[3e5]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[3e6]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[197]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[198]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[3e7]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[361]"></a>ADCHardwareOversampleConfigure</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.ADCHardwareOversampleConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC
</UL>

<P><STRONG><a name="[1a9]"></a>ADCProcessorTrigger</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(i.ADCProcessorTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Server
</UL>

<P><STRONG><a name="[360]"></a>ADCSequenceConfigure</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, adc.o(i.ADCSequenceConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCSequenceConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC
</UL>

<P><STRONG><a name="[363]"></a>ADCSequenceEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.ADCSequenceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC
</UL>

<P><STRONG><a name="[362]"></a>ADCSequenceStepConfigure</STRONG> (Thumb, 154 bytes, Stack size 4 bytes, adc.o(i.ADCSequenceStepConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCSequenceStepConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC
</UL>

<P><STRONG><a name="[365]"></a>EEPROMInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, eeprom.o(i.EEPROMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EEPROMInit &rArr; SysCtlPeripheralReset
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_EEPROM
</UL>

<P><STRONG><a name="[1d5]"></a>EEPROMProgram</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, eeprom.o(i.EEPROMProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Configurations
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_WGA
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_UAVType
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_b
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MotorT
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MotorStartingThrottle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MotorNonlineFactor
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MotorFullThrottleRatio
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MagnetometerSensivitity
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MagnetometerOffset
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_Horizontal_Calibration
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_GyroscopeOffset
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_Channel_Scale
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_Channel_Reflection
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_Channel_Min
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_BatVoltageADCMag
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_BatSTVoltage
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_AccelerometerSensivitity
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_AccelerometerOffset
</UL>

<P><STRONG><a name="[334]"></a>EEPROMRead</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, eeprom.o(i.EEPROMRead))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Configurations
</UL>

<P><STRONG><a name="[32a]"></a>FPUEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPUEnable))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
</UL>

<P><STRONG><a name="[329]"></a>FPULazyStackingEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fpu.o(i.FPULazyStackingEnable))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
</UL>

<P><STRONG><a name="[3ea]"></a>GPIODirModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gpio.o(i.GPIODirModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
</UL>

<P><STRONG><a name="[3eb]"></a>GPIOPadConfigSet</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, gpio.o(i.GPIOPadConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
</UL>

<P><STRONG><a name="[351]"></a>GPIOPinConfigure</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[35f]"></a>GPIOPinTypeADC</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeADC &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC
</UL>

<P><STRONG><a name="[370]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeGPIOOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[350]"></a>GPIOPinTypeI2C</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeI2C &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[34f]"></a>GPIOPinTypeI2CSCL</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeI2CSCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeI2CSCL &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[36c]"></a>GPIOPinTypePWM</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypePWM &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[371]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[37b]"></a>GPIOPinTypeTimer</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeTimer &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[366]"></a>GPIOPinTypeUART</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
</UL>

<P><STRONG><a name="[392]"></a>GPIOPinTypeUSBAnalog</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, gpio.o(i.GPIOPinTypeUSBAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOPinTypeUSBAnalog &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
</UL>

<P><STRONG><a name="[236]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOPinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Green
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blue
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_RST_LOW
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_RST_HIGH
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DC_LOW
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DC_HIGH
</UL>

<P><STRONG><a name="[38b]"></a>I2CIntRegister</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, i2c.o(i.I2CIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[325]"></a>I2CMasterBusy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterBusy))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ReadData
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[221]"></a>I2CMasterControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterControl))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_start
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ReadData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2A_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Transfered_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[222]"></a>I2CMasterDataGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataGet))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ReadData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Transfered_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[225]"></a>I2CMasterDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterDataPut))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_start
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ReadData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2A_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Transfered_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[21f]"></a>I2CMasterErr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterErr))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Transfered_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
</UL>

<P><STRONG><a name="[352]"></a>I2CMasterInitExpClk</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterInitExpClk))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[21e]"></a>I2CMasterIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Transfered_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
</UL>

<P><STRONG><a name="[27b]"></a>I2CMasterIntDisable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
</UL>

<P><STRONG><a name="[27c]"></a>I2CMasterIntEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
</UL>

<P><STRONG><a name="[220]"></a>I2CMasterSlaveAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2CMasterSlaveAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_start
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ReadData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2A_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Transfered_Handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[2da]"></a>IntDisable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_UART2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DataAvailable
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Uart3
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_DataAvailable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[2db]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntRegister
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntRegister
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_UART2
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DataAvailable
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Uart3
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_DataAvailable
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[457]"></a>IntIsEnabled</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, interrupt.o(i.IntIsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[3f5]"></a>IntMasterDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufRead
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFlush
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceRead
</UL>

<P><STRONG><a name="[3f7]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufRead
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFlush
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceRead
</UL>

<P><STRONG><a name="[36a]"></a>IntPrioritySet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(i.IntPrioritySet))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
</UL>

<P><STRONG><a name="[396]"></a>IntRegister</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interrupt.o(i.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntRegister
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntRegister
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntRegister
</UL>

<P><STRONG><a name="[40f]"></a>InternalUSBRegisterTickHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbtick.o(i.InternalUSBRegisterTickHandler))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[435]"></a>InternalUSBStartOfFrameTick</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbtick.o(i.InternalUSBStartOfFrameTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InternalUSBStartOfFrameTick
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[40e]"></a>InternalUSBTickInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbtick.o(i.InternalUSBTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[36d]"></a>PWMGenConfigure</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.PWMGenConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[36f]"></a>PWMGenEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(i.PWMGenEnable))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[36e]"></a>PWMGenPeriodSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.PWMGenPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[1d3]"></a>PWMOutputState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm.o(i.PWMOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[239]"></a>PWMPulseWidthSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pwm.o(i.PWMPulseWidthSet))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Red
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Out
</UL>

<P><STRONG><a name="[3f0]"></a>ProcessDataFromHost</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, usbdcdc.o(i.ProcessDataFromHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessDataFromHost
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
</UL>

<P><STRONG><a name="[3f1]"></a>ProcessDataToHost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbdcdc.o(i.ProcessDataToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessDataToHost
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
</UL>

<P><STRONG><a name="[2a6]"></a>SSIBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(i.SSIBusy))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Byte
</UL>

<P><STRONG><a name="[372]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, ssi.o(i.SSIConfigSetExpClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[375]"></a>SSIDMAEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(i.SSIDMAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[2a5]"></a>SSIDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SSIDataPut))
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Byte
</UL>

<P><STRONG><a name="[373]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(i.SSIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[376]"></a>SSIIntRegister</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ssi.o(i.SSIIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSIIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[217]"></a>SysCtlClockGet</STRONG> (Thumb, 304 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[328]"></a>SysCtlClockSet</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, sysctl.o(i.SysCtlClockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
</UL>

<P><STRONG><a name="[36b]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPWMClockSet))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[34d]"></a>SysCtlPeripheralDisable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralDisable))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
</UL>

<P><STRONG><a name="[34e]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_uDMA
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_EEPROM
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[34c]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[418]"></a>SysCtlUSBPLLEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlUSBPLLEnable))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[330]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickEnable))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
</UL>

<P><STRONG><a name="[32f]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systick.o(i.SysTickIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
</UL>

<P><STRONG><a name="[32d]"></a>SysTickIntRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, systick.o(i.SysTickIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTickIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
</UL>

<P><STRONG><a name="[32c]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, systick.o(i.SysTickPeriodSet))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
</UL>

<P><STRONG><a name="[37c]"></a>TimerConfigure</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, timer.o(i.TimerConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TimerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[37d]"></a>TimerControlEvent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerControlEvent))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[382]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.TimerEnable))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[2aa]"></a>TimerIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.TimerIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2A_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Receive_Handler
</UL>

<P><STRONG><a name="[381]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.TimerIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[380]"></a>TimerIntRegister</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer.o(i.TimerIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[37e]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerLoadSet))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[37f]"></a>TimerPrescaleSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerPrescaleSet))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[2ab]"></a>TimerValueGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.TimerValueGet))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Receive_Handler
</UL>

<P><STRONG><a name="[218]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, uart.o(i.UARTConfigSetExpClk))
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server
</UL>

<P><STRONG><a name="[388]"></a>UARTDMAEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTDMAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
</UL>

<P><STRONG><a name="[37a]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UARTEnable))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[367]"></a>UARTFIFOEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(i.UARTFIFOEnable))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
</UL>

<P><STRONG><a name="[379]"></a>UARTFIFOLevelSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTFIFOLevelSet))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
</UL>

<P><STRONG><a name="[20f]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(i.UARTIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sbus_Receive_Handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
</UL>

<P><STRONG><a name="[368]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
</UL>

<P><STRONG><a name="[369]"></a>UARTIntRegister</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart.o(i.UARTIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Ultrasonic
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Receiver
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS
</UL>

<P><STRONG><a name="[210]"></a>UARTRxErrorClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.UARTRxErrorClear))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sbus_Receive_Handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
</UL>

<P><STRONG><a name="[2a8]"></a>UARTRxErrorGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(i.UARTRxErrorGet))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sbus_Receive_Handler
</UL>

<P><STRONG><a name="[3fe]"></a>ULPIConfigSet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbulpi.o(i.ULPIConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIRegWrite
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[9b]"></a>USB0DeviceIntHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbdhandler.o(i.USB0DeviceIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB0DeviceIntHandler &rArr; USBDeviceIntHandlerInternal &rArr; USBDeviceEnumHandler &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusControl
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text.init_drv_USB)
</UL>
<P><STRONG><a name="[2e3]"></a>USBBufferDataAvailable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbbuffer.o(i.USBBufferDataAvailable))
<BR><BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbUart_DataAvailable
</UL>

<P><STRONG><a name="[1]"></a>USBBufferEventCallback</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, usbbuffer.o(i.USBBufferEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBBufferEventCallback &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufUsed
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFree
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufContigFree
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceWrite
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceRead
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_def.o(.data.g_sCDCDevice)
</UL>
<P><STRONG><a name="[2e1]"></a>USBBufferFlush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbbuffer.o(i.USBBufferFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBBufferFlush &rArr; USBRingBufFlush &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDControlHandler
</UL>

<P><STRONG><a name="[393]"></a>USBBufferInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbbuffer.o(i.USBBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
</UL>

<P><STRONG><a name="[3dc]"></a>USBBufferRead</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbbuffer.o(i.USBBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBBufferRead &rArr; USBRingBufRead &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufUsed
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_UsbUart
</UL>

<P><STRONG><a name="[3e2]"></a>USBBufferWrite</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbbuffer.o(i.USBBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFree
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_UsbUart
</UL>

<P><STRONG><a name="[419]"></a>USBClockEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBClockEnable))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[438]"></a>USBControllerVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBControllerVersion))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLibDMAInit
</UL>

<P><STRONG><a name="[40b]"></a>USBDCDCCompositeInit</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbdcdc.o(i.USBDCDCCompositeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDCDCCompositeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDFeatureGet
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDDeviceInfoInit
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBTickInit
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBRegisterTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCInit
</UL>

<P><STRONG><a name="[395]"></a>USBDCDCInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbdcdc.o(i.USBDCDCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBDCDCInit &rArr; USBDCDInit &rArr; ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
</UL>

<P><STRONG><a name="[3]"></a>USBDCDCPacketRead</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, usbdcdc.o(i.USBDCDCPacketRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBDCDCPacketRead &rArr; USBEndpointDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_def.o(.data.g_sRxBuffer)
</UL>
<P><STRONG><a name="[6]"></a>USBDCDCPacketWrite</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbdcdc.o(i.USBDCDCPacketWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBDCDCPacketWrite &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_def.o(.data.g_sTxBuffer)
</UL>
<P><STRONG><a name="[4]"></a>USBDCDCRxPacketAvailable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbdcdc.o(i.USBDCDCRxPacketAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDCDCRxPacketAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_def.o(.data.g_sRxBuffer)
</UL>
<P><STRONG><a name="[7]"></a>USBDCDCTxPacketAvailable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbdcdc.o(i.USBDCDCTxPacketAvailable))
<BR>[Address Reference Count : 1]<UL><LI> usb_def.o(.data.g_sTxBuffer)
</UL>
<P><STRONG><a name="[412]"></a>USBDCDConfigDescGet</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, usbdcdesc.o(i.USBDCDConfigDescGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBDCDConfigDescGet &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetNum
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGet
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[415]"></a>USBDCDConfigDescGetNum</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbdcdesc.o(i.USBDCDConfigDescGetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDCDConfigDescGetNum &rArr; USBDescGetNum
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
</UL>

<P><STRONG><a name="[42b]"></a>USBDCDConfigDescGetSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbdcdesc.o(i.USBDCDConfigDescGetSize))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
</UL>

<P><STRONG><a name="[416]"></a>USBDCDConfigGetInterface</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, usbdcdesc.o(i.USBDCDConfigGetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetNum
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGet
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterfaceEndpoint
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
</UL>

<P><STRONG><a name="[417]"></a>USBDCDConfigGetInterfaceEndpoint</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbdcdesc.o(i.USBDCDConfigGetInterfaceEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[40d]"></a>USBDCDDeviceInfoInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDDeviceInfoInit))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[40c]"></a>USBDCDFeatureGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDFeatureGet))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[410]"></a>USBDCDInit</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, usbdenum.o(i.USBDCDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBDCDInit &rArr; ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlUSBPLLEnable
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBTickInit
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGMode
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntEnableEndpoint
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntEnableControl
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusControl
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLibDMAInit
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIEnable
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIDisable
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLPMIntEnable
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusEndpoint
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevMode
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMEnable
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMDisable
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMConfig
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevConnect
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCInit
</UL>

<P><STRONG><a name="[3f2]"></a>USBDCDRequestDataEP0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDRequestDataEP0))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
</UL>

<P><STRONG><a name="[3f4]"></a>USBDCDSendDataEP0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDSendDataEP0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBDCDSendDataEP0 &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
</UL>

<P><STRONG><a name="[3ec]"></a>USBDCDStallEP0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbdenum.o(i.USBDCDStallEP0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDCDStallEP0
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEP0Data
</UL>

<P><STRONG><a name="[45c]"></a>USBDMAChannelAddressSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelAddressSet))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[460]"></a>USBDMAChannelConfigSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[45d]"></a>USBDMAChannelCountSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelCountSet))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[455]"></a>USBDMAChannelDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelRelease
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelDisable
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[459]"></a>USBDMAChannelEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[456]"></a>USBDMAChannelIntDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelIntDisable
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelDisable
</UL>

<P><STRONG><a name="[458]"></a>USBDMAChannelIntEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelIntEnable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[45b]"></a>USBDMAChannelIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBIntStatus
</UL>

<P><STRONG><a name="[45a]"></a>USBDMAChannelStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelStatus
</UL>

<P><STRONG><a name="[414]"></a>USBDescGet</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbdesc.o(i.USBDescGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBDescGet
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGet
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
</UL>

<P><STRONG><a name="[413]"></a>USBDescGetNum</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbdesc.o(i.USBDescGetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGet
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
</UL>

<P><STRONG><a name="[432]"></a>USBDevAddrSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb.o(i.USBDevAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[426]"></a>USBDevConnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[434]"></a>USBDevDisconnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[42f]"></a>USBDevEndpointConfigSet</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[3f3]"></a>USBDevEndpointDataAck</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointDataAck))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSyncFrame
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetFeature
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetDescriptor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetConfiguration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetAddress
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetStatus
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetInterface
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetConfiguration
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClearFeature
</UL>

<P><STRONG><a name="[428]"></a>USBDevEndpointStall</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointStall))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDStallEP0
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSyncFrame
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetFeature
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetDescriptor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetConfiguration
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDReadAndDispatchRequest
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetStatus
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetInterface
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClearFeature
</UL>

<P><STRONG><a name="[429]"></a>USBDevEndpointStallClear</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointStallClear))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClearFeature
</UL>

<P><STRONG><a name="[3ee]"></a>USBDevEndpointStatusClear</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointStatusClear))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[41e]"></a>USBDevLPMConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBDevLPMConfig))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[421]"></a>USBDevLPMDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDevLPMDisable))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[420]"></a>USBDevLPMEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDevLPMEnable))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[41d]"></a>USBDevMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBDevMode))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[42d]"></a>USBDeviceConfig</STRONG> (Thumb, 410 bytes, Stack size 112 bytes, usbdconfig.o(i.USBDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBDeviceConfig &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterfaceEndpoint
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGet
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFIFOConfigSet
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetConfiguration
</UL>

<P><STRONG><a name="[42e]"></a>USBDeviceConfigAlternate</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, usbdconfig.o(i.USBDeviceConfigAlternate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBDeviceConfigAlternate &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterfaceEndpoint
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
</UL>

<P><STRONG><a name="[431]"></a>USBDeviceEnumHandler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usbdenum.o(i.USBDeviceEnumHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBDeviceEnumHandler &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDReadAndDispatchRequest
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevAddrSet
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[402]"></a>USBDeviceIntHandlerInternal</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, usbdenum.o(i.USBDeviceIntHandlerInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBDeviceIntHandlerInternal &rArr; USBDeviceEnumHandler &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBStartOfFrameTick
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceResumeTickHandler
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLPMIntStatus
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusEndpoint
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMEnable
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0DeviceIntHandler
</UL>

<P><STRONG><a name="[433]"></a>USBDeviceResumeTickHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbdenum.o(i.USBDeviceResumeTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDeviceResumeTickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostResume
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[463]"></a>USBEndpointDMAChannel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAChannel))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[45f]"></a>USBEndpointDMAConfigSet</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[462]"></a>USBEndpointDMADisable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMADisable))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelRelease
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelDisable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[461]"></a>USBEndpointDMAEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[3e9]"></a>USBEndpointDataAvail</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDataAvail))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCRxPacketAvailable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCTickHandler
</UL>

<P><STRONG><a name="[411]"></a>USBEndpointDataGet</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, usb.o(i.USBEndpointDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBEndpointDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDReadAndDispatchRequest
</UL>

<P><STRONG><a name="[3fd]"></a>USBEndpointDataPut</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, usb.o(i.USBEndpointDataPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketWrite
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSerialState
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>

<P><STRONG><a name="[3f9]"></a>USBEndpointDataSend</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDataSend))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketWrite
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSerialState
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>

<P><STRONG><a name="[45e]"></a>USBEndpointPacketCountSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb.o(i.USBEndpointPacketCountSet))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[3ed]"></a>USBEndpointStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb.o(i.USBEndpointStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCRxPacketAvailable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[467]"></a>USBFIFOAddrGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBFIFOAddrGet))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>

<P><STRONG><a name="[430]"></a>USBFIFOConfigSet</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usb.o(i.USBFIFOConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[437]"></a>USBHostResume</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBHostResume))
<BR><BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceResumeTickHandler
</UL>

<P><STRONG><a name="[424]"></a>USBIntEnableControl</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb.o(i.USBIntEnableControl))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[425]"></a>USBIntEnableEndpoint</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBIntEnableEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[401]"></a>USBIntStatusControl</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usb.o(i.USBIntStatusControl))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0DeviceIntHandler
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[423]"></a>USBIntStatusEndpoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBIntStatusEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[41f]"></a>USBLPMIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb.o(i.USBLPMIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[436]"></a>USBLPMIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBLPMIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[422]"></a>USBLibDMAInit</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, usbdma.o(i.USBLibDMAInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBLibDMAInit
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBControllerVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[41c]"></a>USBOTGMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBOTGMode))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[407]"></a>USBRingBufAdvanceRead</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbringbuf.o(i.USBRingBufAdvanceRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBRingBufAdvanceRead &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
</UL>

<P><STRONG><a name="[403]"></a>USBRingBufAdvanceWrite</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufAdvanceWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
</UL>

<P><STRONG><a name="[406]"></a>USBRingBufContigFree</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufContigFree))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
</UL>

<P><STRONG><a name="[3fb]"></a>USBRingBufContigUsed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufContigUsed))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>

<P><STRONG><a name="[408]"></a>USBRingBufFlush</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbringbuf.o(i.USBRingBufFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBRingBufFlush &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferFlush
</UL>

<P><STRONG><a name="[404]"></a>USBRingBufFree</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufFree))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>

<P><STRONG><a name="[409]"></a>USBRingBufInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufInit))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferInit
</UL>

<P><STRONG><a name="[40a]"></a>USBRingBufRead</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, usbringbuf.o(i.USBRingBufRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBRingBufRead &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferRead
</UL>

<P><STRONG><a name="[3fc]"></a>USBRingBufUsed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufUsed))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferRead
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferDataAvailable
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>

<P><STRONG><a name="[405]"></a>USBRingBufWrite</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usbringbuf.o(i.USBRingBufWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>

<P><STRONG><a name="[394]"></a>USBStackModeSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbmode.o(i.USBStackModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB
</UL>

<P><STRONG><a name="[41b]"></a>USBULPIDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBULPIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[41a]"></a>USBULPIEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBULPIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[3ff]"></a>USBULPIRegRead</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb.o(i.USBULPIRegRead))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
</UL>

<P><STRONG><a name="[400]"></a>USBULPIRegWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb.o(i.USBULPIRegWrite))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
</UL>

<P><STRONG><a name="[19a]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[441]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[277]"></a>__hardfp__fabsf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fabsf.o(i.__hardfp__fabsf))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
</UL>

<P><STRONG><a name="[39e]"></a>__hardfp_acos</STRONG> (Thumb, 738 bytes, Stack size 72 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hardfp_acos &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
</UL>

<P><STRONG><a name="[2c4]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_get_Rotation_vec
</UL>

<P><STRONG><a name="[278]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getPitch
</UL>

<P><STRONG><a name="[1c0]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getRoll
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[21a]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server
</UL>

<P><STRONG><a name="[4c7]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[39b]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
</UL>

<P><STRONG><a name="[1c1]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq_f
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[3a0]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
</UL>

<P><STRONG><a name="[227]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
</UL>

<P><STRONG><a name="[4c8]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[39a]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
</UL>

<P><STRONG><a name="[1c2]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[3a1]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
</UL>

<P><STRONG><a name="[1cb]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_constrain
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate_delta_angle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_normalize
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Heading_Correction
</UL>

<P><STRONG><a name="[1d1]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq_f
</UL>

<P><STRONG><a name="[444]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[446]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[43b]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[445]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[44a]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[439]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[449]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[43a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[44b]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[44d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[451]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[43f]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[443]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[440]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[450]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[442]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[448]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[192]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[44c]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[43d]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[43e]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[377]"></a>uDMAChannelAssign</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelAssign))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[464]"></a>uDMAChannelAttributeDisable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelAttributeDisable))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelRelease
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[374]"></a>uDMAChannelControlSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelControlSet))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBUnitSizeSet
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBArbSizeSet
</UL>

<P><STRONG><a name="[465]"></a>uDMAChannelDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelDisable
</UL>

<P><STRONG><a name="[2a3]"></a>uDMAChannelEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Sent_Handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[2dd]"></a>uDMAChannelIsEnabled</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelIsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>

<P><STRONG><a name="[466]"></a>uDMAChannelModeGet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelModeGet))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBIntStatus
</UL>

<P><STRONG><a name="[2e2]"></a>uDMAChannelSizeGet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelSizeGet))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
</UL>

<P><STRONG><a name="[2a2]"></a>uDMAChannelTransferSet</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, udma.o(i.uDMAChannelTransferSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAChannelTransferSet
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Sent_Handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>

<P><STRONG><a name="[399]"></a>uDMAControlBaseSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udma.o(i.uDMAControlBaseSet))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_uDMA
</UL>

<P><STRONG><a name="[398]"></a>uDMAEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udma.o(i.uDMAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_uDMA
</UL>

<P><STRONG><a name="[168]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[82]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[447]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[4c9]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4ca]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4cb]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4cc]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4cd]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[27d]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
</UL>

<P><STRONG><a name="[468]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[46b]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[46e]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[472]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[470]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4ce]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[471]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[453]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[473]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[213]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4cf]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[454]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[4d0]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[4d1]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[474]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[4d2]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[475]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[478]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq_f
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[476]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[46a]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
</UL>

<P><STRONG><a name="[46d]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[44e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[477]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[43c]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[479]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[452]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[39c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[47b]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq_f
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
</UL>

<P><STRONG><a name="[47c]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[39f]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
</UL>

<P><STRONG><a name="[47e]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[47f]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq_f
</UL>

<P><STRONG><a name="[480]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[4d3]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[481]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUT_IIR_calc_freq_f
</UL>

<P><STRONG><a name="[482]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[39d]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_init
</UL>

<P><STRONG><a name="[483]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[47d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[161]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[4d4]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4d5]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[469]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[31f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
</UL>

<P><STRONG><a name="[484]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[143]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[147]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[46f]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[44f]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[485]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1d2]"></a>Buzzer</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_led.o(.text.Buzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Buzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputState
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_server
</UL>

<P><STRONG><a name="[235]"></a>LED_Blue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_led.o(.text.LED_Blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Blue
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_server
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[237]"></a>LED_Green</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_led.o(.text.LED_Green))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Green
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_server
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[238]"></a>LED_Red</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, drv_led.o(.text.LED_Red))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Red
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMPulseWidthSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_server
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED
</UL>

<P><STRONG><a name="[8c]"></a>LED_server</STRONG> (Thumb, 2156 bytes, Stack size 88 bytes, drv_led.o(.text.LED_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LED_server &rArr; LED_Red
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Red
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Green
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blue
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_led.o(.text.init_drv_LED)
</UL>
<P><STRONG><a name="[97]"></a>I2C0_Transfered_Handler</STRONG> (Thumb, 2396 bytes, Stack size 264 bytes, drv_sensors.o(.text.I2C0_Transfered_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = I2C0_Transfered_Handler &rArr; IMUAccelerometerUpdate &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntClear
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterErr
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.init_drv_Sensors)
</UL>
<P><STRONG><a name="[98]"></a>I2C1_Transfered_Handler</STRONG> (Thumb, 2864 bytes, Stack size 168 bytes, drv_sensors.o(.text.I2C1_Transfered_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = I2C1_Transfered_Handler &rArr; IMUMagnetometerUpdate &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntClear
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterErr
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.init_drv_Sensors)
</UL>
<P><STRONG><a name="[9a]"></a>MainMCHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_sensors.o(.text.MainMCHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = MainMCHandler &rArr; ctrl_main &rArr; ctrl_Attitude &rArr; ctrl_Attitude_MultiRotor_C42_PWM &rArr; update_output_throttle &rArr; get_history_Airframe_attitude &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_main
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.init_drv_Sensors)
</UL>
<P><STRONG><a name="[99]"></a>Timer2A_IRQHandler</STRONG> (Thumb, 498 bytes, Stack size 56 bytes, drv_sensors.o(.text.Timer2A_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Timer2A_IRQHandler &rArr; i2c_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_start
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.init_drv_Sensors)
</UL>
<P><STRONG><a name="[286]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, drv_sensors.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMCHandler
</UL>

<P><STRONG><a name="[226]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, drv_sensors.o(.text.__NVIC_SetPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Transfered_Handler
</UL>

<P><STRONG><a name="[324]"></a>i2c0ReadData</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, drv_sensors.o(.text.i2c0ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c0ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataGet
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_temperature_rateset
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_pressure_rateset
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[326]"></a>i2c0WriteData</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, drv_sensors.o(.text.i2c0WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_temperature_rateset
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_pressure_rateset
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[2d9]"></a>i2c_read_start</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, drv_sensors.o(.text.i2c_read_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_read_start
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2A_IRQHandler
</UL>

<P><STRONG><a name="[389]"></a>spl06_pressure_rateset</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, drv_sensors.o(.text.spl06_pressure_rateset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spl06_pressure_rateset &rArr; i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[38a]"></a>spl06_temperature_rateset</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, drv_sensors.o(.text.spl06_temperature_rateset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spl06_temperature_rateset &rArr; i2c0WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0WriteData
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c0ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors
</UL>

<P><STRONG><a name="[2bb]"></a>__ARM_isinf</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sensors.o(.text.__ARM_isinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isinf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
</UL>

<P><STRONG><a name="[2b9]"></a>__ARM_isinff</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, sensors.o(.text.__ARM_isinff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_isinff
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition
</UL>

<P><STRONG><a name="[2ba]"></a>__ARM_isnan</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sensors.o(.text.__ARM_isnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isnan
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
</UL>

<P><STRONG><a name="[2b8]"></a>__ARM_isnanf</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, sensors.o(.text.__ARM_isnanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition
</UL>

<P><STRONG><a name="[2bc]"></a>map_projection_init</STRONG> (Thumb, 1216 bytes, Stack size 280 bytes, sensors.o(.text.map_projection_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = map_projection_init &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
</UL>

<P><STRONG><a name="[2bd]"></a>map_projection_project</STRONG> (Thumb, 864 bytes, Stack size 232 bytes, sensors.o(.text.map_projection_project))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = map_projection_project &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
</UL>

<P><STRONG><a name="[230]"></a>vector3_float_mult</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, sensors.o(.text.vector3_float_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vector3_float_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdate
</UL>

<P><STRONG><a name="[299]"></a>OLED_DC_HIGH</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_oled.o(.text.OLED_DC_HIGH))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_DC_HIGH
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Sent_Handler
</UL>

<P><STRONG><a name="[29a]"></a>OLED_DC_LOW</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_oled.o(.text.OLED_DC_LOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_DC_LOW
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Sent_Handler
</UL>

<P><STRONG><a name="[29f]"></a>OLED_RST_HIGH</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_oled.o(.text.OLED_RST_HIGH))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_RST_HIGH
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[2a0]"></a>OLED_RST_LOW</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_oled.o(.text.OLED_RST_LOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_RST_LOW
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[8d]"></a>OLED_Sent_Handler</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, drv_oled.o(.text.OLED_Sent_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Sent_Handler &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DC_LOW
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DC_HIGH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_oled.o(.text.init_drv_OLED)
</UL>
<P><STRONG><a name="[2a4]"></a>OLED_Write_Byte</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, drv_oled.o(.text.OLED_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Cmd
</UL>

<P><STRONG><a name="[2a7]"></a>OLED_Write_Cmd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_oled.o(.text.OLED_Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Write_Cmd &rArr; OLED_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Write_Byte
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DC_LOW
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OLED
</UL>

<P><STRONG><a name="[90]"></a>PPM_Receive_Handler</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, drv_receiver.o(.text.PPM_Receive_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PPM_Receive_Handler &rArr; Receiver_Update &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerValueGet
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_range_float
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_receiver.o(.text.init_drv_Receiver)
</UL>
<P><STRONG><a name="[91]"></a>RC_Check_Server</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, drv_receiver.o(.text.RC_Check_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RC_Check_Server &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Receiver_NC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_receiver.o(.text.init_drv_Receiver)
</UL>
<P><STRONG><a name="[8f]"></a>Sbus_Receive_Handler</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, drv_receiver.o(.text.Sbus_Receive_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Sbus_Receive_Handler &rArr; Receiver_Update &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxErrorGet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxErrorClear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_Update
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time_st
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_receiver.o(.text.init_drv_Receiver)
</UL>
<P><STRONG><a name="[2ac]"></a>in_range_float</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, drv_receiver.o(.text.in_range_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = in_range_float
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Receive_Handler
</UL>

<P><STRONG><a name="[2ca]"></a>constrain_range_float</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, receiver.o(.text.constrain_range_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = constrain_range_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver_Update
</UL>

<P><STRONG><a name="[a0]"></a>UART7_Handler</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, drv_ultrasonic.o(.text.UART7_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = UART7_Handler &rArr; PositionSensorUpdatePosition &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxErrorClear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ultrasonic.o(.text.init_drv_Ultrasonic)
</UL>
<P><STRONG><a name="[8e]"></a>OpticalFlow_Handler</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, drv_opticalflow.o(.text.OpticalFlow_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = OpticalFlow_Handler &rArr; PositionSensorUpdateVel &rArr; get_pass_time_st &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxErrorGet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxErrorClear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow.o(.text.init_drv_OpticalFlow)
</UL>
<P><STRONG><a name="[8a]"></a>GPS_Handler</STRONG> (Thumb, 1560 bytes, Stack size 96 bytes, drv_gps.o(.text.GPS_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = GPS_Handler &rArr; PositionSensorUpdatePositionGlobalVel &rArr; map_projection_init &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxErrorClear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_isValid
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gps.o(.text.init_drv_GPS)
</UL>
<P><STRONG><a name="[8b]"></a>GPS_Server</STRONG> (Thumb, 860 bytes, Stack size 64 bytes, drv_gps.o(.text.GPS_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = GPS_Server &rArr; get_pass_time &rArr; get_TIME_now
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UbloxInit_StartSend
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gps.o(.text.init_drv_GPS)
</UL>
<P><STRONG><a name="[219]"></a>UbloxInit_StartSend</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, drv_gps.o(.text.UbloxInit_StartSend))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server
</UL>

<P><STRONG><a name="[2cc]"></a>RingBuf_uint8_t_get_Bytes2read</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_sdi.o(.text.RingBuf_uint8_t_get_Bytes2read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_DataAvailable
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_pop_length
</UL>

<P><STRONG><a name="[387]"></a>RingBuf_uint8_t_init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, drv_sdi.o(.text.RingBuf_uint8_t_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RingBuf_uint8_t_init
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDI
</UL>

<P><STRONG><a name="[2e0]"></a>RingBuf_uint8_t_pop_DMABuf</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_sdi.o(.text.RingBuf_uint8_t_pop_DMABuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuf_uint8_t_pop_DMABuf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>

<P><STRONG><a name="[2cb]"></a>RingBuf_uint8_t_pop_length</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, drv_sdi.o(.text.RingBuf_uint8_t_pop_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBuf_uint8_t_pop_length &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_get_Bytes2read
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Uart3
</UL>

<P><STRONG><a name="[2df]"></a>RingBuf_uint8_t_push</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, drv_sdi.o(.text.RingBuf_uint8_t_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuf_uint8_t_push
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>

<P><STRONG><a name="[93]"></a>SDI_RCTrigger</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_sdi.o(.text.SDI_RCTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDI_RCTrigger &rArr; Uart3_DataAvailable &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_DataAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdi.o(.text.init_drv_SDI)
</UL>
<P><STRONG><a name="[94]"></a>SDI_Server</STRONG> (Thumb, 760 bytes, Stack size 56 bytes, drv_sdi.o(.text.SDI_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDI_Server &rArr; read_Uart3 &rArr; RingBuf_uint8_t_pop_length &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_Uart3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdi.o(.text.init_drv_SDI)
</UL>
<P><STRONG><a name="[92]"></a>UART3_Handler</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, drv_sdi.o(.text.UART3_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART3_Handler &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxErrorClear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelIsEnabled
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_push
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_pop_DMABuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdi.o(.text.init_drv_SDI)
</UL>
<P><STRONG><a name="[2ce]"></a>RingBuf_uint8_t_get_Bytes2read</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_uart2.o(.text.RingBuf_uint8_t_get_Bytes2read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DataAvailable
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_pop_length
</UL>

<P><STRONG><a name="[2d0]"></a>RingBuf_uint8_t_get_Freesize</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_uart2.o(.text.RingBuf_uint8_t_get_Freesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuf_uint8_t_get_Freesize
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_push_length
</UL>

<P><STRONG><a name="[397]"></a>RingBuf_uint8_t_init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, drv_uart2.o(.text.RingBuf_uint8_t_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RingBuf_uint8_t_init
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart2
</UL>

<P><STRONG><a name="[2de]"></a>RingBuf_uint8_t_pop_DMABuf</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_uart2.o(.text.RingBuf_uint8_t_pop_DMABuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBuf_uint8_t_pop_DMABuf
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[2cd]"></a>RingBuf_uint8_t_pop_length</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, drv_uart2.o(.text.RingBuf_uint8_t_pop_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBuf_uint8_t_pop_length &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_get_Bytes2read
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_UART2
</UL>

<P><STRONG><a name="[2dc]"></a>RingBuf_uint8_t_push</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, drv_uart2.o(.text.RingBuf_uint8_t_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuf_uint8_t_push
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[2cf]"></a>RingBuf_uint8_t_push_length</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, drv_uart2.o(.text.RingBuf_uint8_t_push_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBuf_uint8_t_push_length &rArr; RingBuf_uint8_t_get_Freesize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_get_Freesize
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
</UL>

<P><STRONG><a name="[9f]"></a>UART2_Handler</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, drv_uart2.o(.text.UART2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART2_Handler &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxErrorClear
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_push
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_uint8_t_pop_DMABuf
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelIsEnabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart2.o(.text.init_drv_Uart2)
</UL>
<P><STRONG><a name="[89]"></a>ADC_Server</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, drv_adc.o(.text.ADC_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Server
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_BatVoltageADCMag
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCProcessorTrigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.text.init_drv_ADC)
</UL>
<P><STRONG><a name="[95]"></a>SDI_RCTrigger</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_sdi2.o(.text.SDI_RCTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDI_RCTrigger &rArr; UART2_DataAvailable &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_DataAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdi2.o(.text.init_drv_SDI2)
</UL>
<P><STRONG><a name="[96]"></a>SDI_Server</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, drv_sdi2.o(.text.SDI_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDI_Server &rArr; read_UART2 &rArr; RingBuf_uint8_t_pop_length &rArr; RingBuf_uint8_t_get_Bytes2read
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_UART2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sdi2.o(.text.init_drv_SDI2)
</UL>
<P><STRONG><a name="[83]"></a>Systick_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, basic.o(.text.Systick_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> basic.o(.text.init_Basic)
</UL>
<P><STRONG><a name="[32e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, basic.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
</UL>

<P><STRONG><a name="[32b]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, basic.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic
</UL>

<P><STRONG><a name="[102]"></a>Param_get_BatSTVoltage</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_BatSTVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Param_get_BatSTVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_BatSTVoltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[104]"></a>Param_get_BatVADCMag</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_BatVADCMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Param_get_BatVADCMag
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_BatVoltageADCMag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[fe]"></a>Param_get_MotorFullThrottleRatio</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_MotorFullThrottleRatio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Param_get_MotorFullThrottleRatio
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorFullThrottleRatio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[fc]"></a>Param_get_MotorNonlineFactor</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_MotorNonlineFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Param_get_MotorNonlineFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorNonlineFactor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[fa]"></a>Param_get_MotorStartingThrottle</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, configurations.o(.text.Param_get_MotorStartingThrottle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_MotorStartingThrottle
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorStartingThrottle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[100]"></a>Param_get_MotorT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_MotorT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Param_get_MotorT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[11a]"></a>Param_get_PitchCtrl_P1</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, configurations.o(.text.Param_get_PitchCtrl_P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Param_get_PitchCtrl_P1 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[11c]"></a>Param_get_PitchCtrl_P2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_PitchCtrl_P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_PitchCtrl_P2 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[11e]"></a>Param_get_PitchCtrl_P3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_PitchCtrl_P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_PitchCtrl_P3 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[120]"></a>Param_get_PitchCtrl_P4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_PitchCtrl_P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_PitchCtrl_P4 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[122]"></a>Param_get_PitchCtrl_TD4P1</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, configurations.o(.text.Param_get_PitchCtrl_TD4P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Param_get_PitchCtrl_TD4P1 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[124]"></a>Param_get_PitchCtrl_TD4P2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_PitchCtrl_TD4P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_PitchCtrl_TD4P2 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[126]"></a>Param_get_PitchCtrl_TD4P3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_PitchCtrl_TD4P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_PitchCtrl_TD4P3 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[128]"></a>Param_get_PitchCtrl_TD4P4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_PitchCtrl_TD4P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_PitchCtrl_TD4P4 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[118]"></a>Param_get_PitchCtrl_b</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_PitchCtrl_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_PitchCtrl_b &rArr; Cfg_get_RPYCtrl_b
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[108]"></a>Param_get_RollCtrl_P1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_RollCtrl_P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_RollCtrl_P1 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[10a]"></a>Param_get_RollCtrl_P2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_RollCtrl_P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_RollCtrl_P2 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[10c]"></a>Param_get_RollCtrl_P3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_RollCtrl_P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_RollCtrl_P3 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[10e]"></a>Param_get_RollCtrl_P4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_RollCtrl_P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_RollCtrl_P4 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[110]"></a>Param_get_RollCtrl_TD4P1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_RollCtrl_TD4P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_RollCtrl_TD4P1 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[112]"></a>Param_get_RollCtrl_TD4P2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_RollCtrl_TD4P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_RollCtrl_TD4P2 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[114]"></a>Param_get_RollCtrl_TD4P3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_RollCtrl_TD4P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_RollCtrl_TD4P3 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[116]"></a>Param_get_RollCtrl_TD4P4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_RollCtrl_TD4P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_RollCtrl_TD4P4 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[106]"></a>Param_get_RollCtrl_b</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_RollCtrl_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_RollCtrl_b &rArr; Cfg_get_RPYCtrl_b
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[f8]"></a>Param_get_UAVType</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, configurations.o(.text.Param_get_UAVType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_UAVType
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_UAVType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[12c]"></a>Param_get_YawCtrl_P1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_YawCtrl_P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_YawCtrl_P1 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[12e]"></a>Param_get_YawCtrl_P2</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, configurations.o(.text.Param_get_YawCtrl_P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Param_get_YawCtrl_P2 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[130]"></a>Param_get_YawCtrl_P3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_YawCtrl_P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_YawCtrl_P3 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[132]"></a>Param_get_YawCtrl_P4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_YawCtrl_P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_YawCtrl_P4 &rArr; Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[134]"></a>Param_get_YawCtrl_TD4P1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_YawCtrl_TD4P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_YawCtrl_TD4P1 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[136]"></a>Param_get_YawCtrl_TD4P2</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, configurations.o(.text.Param_get_YawCtrl_TD4P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Param_get_YawCtrl_TD4P2 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[138]"></a>Param_get_YawCtrl_TD4P3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_YawCtrl_TD4P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_YawCtrl_TD4P3 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[13a]"></a>Param_get_YawCtrl_TD4P4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_YawCtrl_TD4P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_YawCtrl_TD4P4 &rArr; Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[12a]"></a>Param_get_YawCtrl_b</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, configurations.o(.text.Param_get_YawCtrl_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Param_get_YawCtrl_b &rArr; Cfg_get_RPYCtrl_b
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_RPYCtrl_b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[101]"></a>Param_set_BatSTVoltage</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_BatSTVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Param_set_BatSTVoltage &rArr; Cfg_update_BatSTVoltage &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_BatSTVoltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[103]"></a>Param_set_BatVADCMag</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_BatVADCMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Param_set_BatVADCMag &rArr; Cfg_update_BatVoltageADCMag &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_BatVoltageADCMag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[fd]"></a>Param_set_MotorFullThrottleRatio</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_MotorFullThrottleRatio))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Param_set_MotorFullThrottleRatio &rArr; Cfg_update_MotorFullThrottleRatio &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MotorFullThrottleRatio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[fb]"></a>Param_set_MotorNonlineFactor</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_MotorNonlineFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Param_set_MotorNonlineFactor &rArr; Cfg_update_MotorNonlineFactor &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MotorNonlineFactor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[f9]"></a>Param_set_MotorStartingThrottle</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_MotorStartingThrottle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Param_set_MotorStartingThrottle &rArr; Cfg_update_MotorStartingThrottle &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MotorStartingThrottle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[ff]"></a>Param_set_MotorT</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_MotorT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Param_set_MotorT &rArr; Cfg_update_MotorT &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MotorT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[119]"></a>Param_set_PitchCtrl_P1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_PitchCtrl_P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_PitchCtrl_P1 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[11b]"></a>Param_set_PitchCtrl_P2</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_PitchCtrl_P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_PitchCtrl_P2 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[11d]"></a>Param_set_PitchCtrl_P3</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_PitchCtrl_P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_PitchCtrl_P3 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[11f]"></a>Param_set_PitchCtrl_P4</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_PitchCtrl_P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_PitchCtrl_P4 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[121]"></a>Param_set_PitchCtrl_TD4P1</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_PitchCtrl_TD4P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_PitchCtrl_TD4P1 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[123]"></a>Param_set_PitchCtrl_TD4P2</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_PitchCtrl_TD4P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_PitchCtrl_TD4P2 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[125]"></a>Param_set_PitchCtrl_TD4P3</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_PitchCtrl_TD4P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_PitchCtrl_TD4P3 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[127]"></a>Param_set_PitchCtrl_TD4P4</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_PitchCtrl_TD4P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_PitchCtrl_TD4P4 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[117]"></a>Param_set_PitchCtrl_b</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_PitchCtrl_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_PitchCtrl_b &rArr; Cfg_update_RPYCtrl_b &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[107]"></a>Param_set_RollCtrl_P1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_RollCtrl_P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_RollCtrl_P1 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[109]"></a>Param_set_RollCtrl_P2</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_RollCtrl_P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_RollCtrl_P2 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[10b]"></a>Param_set_RollCtrl_P3</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_RollCtrl_P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_RollCtrl_P3 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[10d]"></a>Param_set_RollCtrl_P4</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_RollCtrl_P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_RollCtrl_P4 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[10f]"></a>Param_set_RollCtrl_TD4P1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_RollCtrl_TD4P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_RollCtrl_TD4P1 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[111]"></a>Param_set_RollCtrl_TD4P2</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_RollCtrl_TD4P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_RollCtrl_TD4P2 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[113]"></a>Param_set_RollCtrl_TD4P3</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_RollCtrl_TD4P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_RollCtrl_TD4P3 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[115]"></a>Param_set_RollCtrl_TD4P4</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_RollCtrl_TD4P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_RollCtrl_TD4P4 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[105]"></a>Param_set_RollCtrl_b</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_RollCtrl_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_RollCtrl_b &rArr; Cfg_update_RPYCtrl_b &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[f7]"></a>Param_set_UAVType</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, configurations.o(.text.Param_set_UAVType))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_UAVType &rArr; Cfg_update_UAVType &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_UAVType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[12b]"></a>Param_set_YawCtrl_P1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_YawCtrl_P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_YawCtrl_P1 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[12d]"></a>Param_set_YawCtrl_P2</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_YawCtrl_P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_YawCtrl_P2 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[12f]"></a>Param_set_YawCtrl_P3</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_YawCtrl_P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_YawCtrl_P3 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[131]"></a>Param_set_YawCtrl_P4</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_YawCtrl_P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_YawCtrl_P4 &rArr; Cfg_update_RPYCtrl_Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[133]"></a>Param_set_YawCtrl_TD4P1</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_YawCtrl_TD4P1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_YawCtrl_TD4P1 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[135]"></a>Param_set_YawCtrl_TD4P2</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_YawCtrl_TD4P2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_YawCtrl_TD4P2 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[137]"></a>Param_set_YawCtrl_TD4P3</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_YawCtrl_TD4P3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_YawCtrl_TD4P3 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[139]"></a>Param_set_YawCtrl_TD4P4</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_YawCtrl_TD4P4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_YawCtrl_TD4P4 &rArr; Cfg_update_RPYCtrl_TD4Pn &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_TD4Pn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[129]"></a>Param_set_YawCtrl_b</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, configurations.o(.text.Param_set_YawCtrl_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Param_set_YawCtrl_b &rArr; Cfg_update_RPYCtrl_b &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_RPYCtrl_b
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configurations.o(.rodata.Params)
</UL>
<P><STRONG><a name="[2c1]"></a>is_zero_f</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, quaternion.o(.text.is_zero_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = is_zero_f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate_delta_angle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_get_Rotation_vec
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_get_PRQuat
</UL>

<P><STRONG><a name="[2c2]"></a>safe_sqrt_f</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, quaternion.o(.text.safe_sqrt_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_get_Rotation_vec
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_get_PRQuat
</UL>

<P><STRONG><a name="[2c5]"></a>vector3_float_square</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, quaternion.o(.text.vector3_float_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vector3_float_square
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate_delta_angle
</UL>

<P><STRONG><a name="[3e1]"></a>vector3_float_mult</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, vector_3.o(.text.vector3_float_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vector3_float_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_constrain
</UL>

<P><STRONG><a name="[3e0]"></a>vector3_float_square</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, vector_3.o(.text.vector3_float_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vector3_float_square
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_constrain
</UL>

<P><STRONG><a name="[205]"></a>Filter_Butter4_LP_float_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ms_main.o(.text.Filter_Butter4_LP_float_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Filter_Butter4_LP_float_init &rArr; Filter_Butter4_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_setCutoffFrequency
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS
</UL>

<P><STRONG><a name="[206]"></a>Filter_Butter4_LP_float_reset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ms_main.o(.text.Filter_Butter4_LP_float_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Filter_Butter4_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_run
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_init
</UL>

<P><STRONG><a name="[209]"></a>Filter_Butter4_LP_float_run</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, ms_main.o(.text.Filter_Butter4_LP_float_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Filter_Butter4_LP_float_run &rArr; Filter_Butter4_LP_float_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
</UL>

<P><STRONG><a name="[20b]"></a>Filter_Butter8_LP_float_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ms_main.o(.text.Filter_Butter8_LP_float_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Filter_Butter8_LP_float_init &rArr; Filter_Butter8_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter8_LP_float_setCutoffFrequency
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter8_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS
</UL>

<P><STRONG><a name="[20c]"></a>Filter_Butter8_LP_float_reset</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ms_main.o(.text.Filter_Butter8_LP_float_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Filter_Butter8_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter8_LP_float_run
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter8_LP_float_init
</UL>

<P><STRONG><a name="[20e]"></a>Filter_Butter8_LP_float_run</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, ms_main.o(.text.Filter_Butter8_LP_float_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Filter_Butter8_LP_float_run &rArr; Filter_Butter8_LP_float_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter8_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_main
</UL>

<P><STRONG><a name="[1cc]"></a>BUT_IIR_calc_freq_f</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, filters_butter.o(.text.BUT_IIR_calc_freq_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter8_LP_float_setCutoffFrequency
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_setCutoffFrequency
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP_float_setCutoffFrequency
</UL>

<P><STRONG><a name="[3a7]"></a>_mav_trim_payload</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, debug.o(.text._mav_trim_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2e8]"></a>crc_accumulate</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, debug.o(.text.crc_accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
</UL>

<P><STRONG><a name="[2e7]"></a>crc_accumulate_buffer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, debug.o(.text.crc_accumulate_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_accumulate_buffer &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f1]"></a>crc_calculate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, debug.o(.text.crc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_calculate &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f2]"></a>crc_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, debug.o(.text.crc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
</UL>

<P><STRONG><a name="[87]"></a>debug_server</STRONG> (Thumb, 652 bytes, Stack size 488 bytes, debug.o(.text.debug_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 1452<LI>Call Chain = debug_server &rArr; mavlink_msg_debug_vect_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_System_Run_Time
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Estimated_Sensor_Position_z
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_debug_vect_pack_chan
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.text.init_Debug)
</UL>
<P><STRONG><a name="[3a2]"></a>mav_array_memcpy</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, debug.o(.text.mav_array_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mav_array_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_debug_vect_pack_chan
</UL>

<P><STRONG><a name="[3a6]"></a>mavlink_finalize_message_buffer</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, debug.o(.text.mavlink_finalize_message_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[3b5]"></a>mavlink_finalize_message_chan</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, debug.o(.text.mavlink_finalize_message_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_debug_vect_pack_chan
</UL>

<P><STRONG><a name="[3b6]"></a>mavlink_get_channel_status</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, debug.o(.text.mavlink_get_channel_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_get_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[320]"></a>mavlink_msg_debug_vect_pack_chan</STRONG> (Thumb, 184 bytes, Stack size 128 bytes, debug.o(.text.mavlink_msg_debug_vect_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = mavlink_msg_debug_vect_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
</UL>

<P><STRONG><a name="[321]"></a>mavlink_msg_to_send_buffer</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, debug.o(.text.mavlink_msg_to_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mavlink_msg_to_send_buffer &rArr; _mav_trim_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_server
</UL>

<P><STRONG><a name="[3d1]"></a>mavlink_sha256_calc</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, debug.o(.text.mavlink_sha256_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mavlink_sha256_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
</UL>

<P><STRONG><a name="[3c7]"></a>mavlink_sha256_final_48</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, debug.o(.text.mavlink_sha256_final_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3d6]"></a>mavlink_sha256_init</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, debug.o(.text.mavlink_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3c8]"></a>mavlink_sha256_update</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, debug.o(.text.mavlink_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_calc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>

<P><STRONG><a name="[3a8]"></a>mavlink_sign_packet</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, debug.o(.text.mavlink_sign_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[85]"></a>CommuLink_RCServer</STRONG> (Thumb, 308 bytes, Stack size 328 bytes, commulink.o(.text.CommuLink_RCServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1188<LI>Call Chain = CommuLink_RCServer &rArr; mavlink_parse_char &rArr; mavlink_frame_char &rArr; mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text.init_CommuLink)
</UL>
<P><STRONG><a name="[84]"></a>CommuLink_RCTrigger</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, commulink.o(.text.CommuLink_RCTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommuLink_RCTrigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text.init_CommuLink)
</UL>
<P><STRONG><a name="[86]"></a>CommuLink_SendServer</STRONG> (Thumb, 714 bytes, Stack size 376 bytes, commulink.o(.text.CommuLink_SendServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = CommuLink_SendServer &rArr; mavlink_msg_param_value_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_pack_chan
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_heartbeat_pack_chan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text.init_CommuLink)
</UL>
<P><STRONG><a name="[3c3]"></a>_mav_parse_error</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, commulink.o(.text._mav_parse_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _mav_parse_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[3aa]"></a>_mav_trim_payload</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, commulink.o(.text._mav_trim_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2ea]"></a>crc_accumulate</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, commulink.o(.text.crc_accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_update_checksum
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
</UL>

<P><STRONG><a name="[2e9]"></a>crc_accumulate_buffer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, commulink.o(.text.crc_accumulate_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_accumulate_buffer &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f3]"></a>crc_calculate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, commulink.o(.text.crc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_calculate &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f4]"></a>crc_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, commulink.o(.text.crc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_start_checksum
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
</UL>

<P><STRONG><a name="[3a3]"></a>mav_array_memcpy</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, commulink.o(.text.mav_array_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mav_array_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_pack_chan
</UL>

<P><STRONG><a name="[3a9]"></a>mavlink_finalize_message_buffer</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, commulink.o(.text.mavlink_finalize_message_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[3b7]"></a>mavlink_finalize_message_chan</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, commulink.o(.text.mavlink_finalize_message_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_pack_chan
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_heartbeat_pack_chan
</UL>

<P><STRONG><a name="[3bf]"></a>mavlink_frame_char</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, commulink.o(.text.mavlink_frame_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = mavlink_frame_char &rArr; mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_buffer
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
</UL>

<P><STRONG><a name="[3c1]"></a>mavlink_frame_char_buffer</STRONG> (Thumb, 1360 bytes, Stack size 56 bytes, commulink.o(.text.mavlink_frame_char_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_update_checksum
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_start_checksum
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_msg_entry
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_parse_error
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char
</UL>

<P><STRONG><a name="[3c0]"></a>mavlink_get_channel_buffer</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, commulink.o(.text.mavlink_get_channel_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_get_channel_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char
</UL>

<P><STRONG><a name="[3b8]"></a>mavlink_get_channel_status</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, commulink.o(.text.mavlink_get_channel_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_get_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_set_proto_version
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[3c5]"></a>mavlink_get_msg_entry</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, commulink.o(.text.mavlink_get_msg_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mavlink_get_msg_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[1f4]"></a>mavlink_msg_heartbeat_pack_chan</STRONG> (Thumb, 180 bytes, Stack size 80 bytes, commulink.o(.text.mavlink_msg_heartbeat_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = mavlink_msg_heartbeat_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuLink_SendServer
</UL>

<P><STRONG><a name="[1f6]"></a>mavlink_msg_param_value_pack_chan</STRONG> (Thumb, 196 bytes, Stack size 112 bytes, commulink.o(.text.mavlink_msg_param_value_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = mavlink_msg_param_value_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuLink_SendServer
</UL>

<P><STRONG><a name="[1f5]"></a>mavlink_msg_to_send_buffer</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, commulink.o(.text.mavlink_msg_to_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mavlink_msg_to_send_buffer &rArr; _mav_trim_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuLink_SendServer
</UL>

<P><STRONG><a name="[1f3]"></a>mavlink_parse_char</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, commulink.o(.text.mavlink_parse_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = mavlink_parse_char &rArr; mavlink_frame_char &rArr; mavlink_frame_char_buffer &rArr; mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_start_checksum
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_buffer
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_parse_error
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuLink_RCServer
</UL>

<P><STRONG><a name="[2b7]"></a>mavlink_set_proto_version</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, commulink.o(.text.mavlink_set_proto_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mavlink_set_proto_version &rArr; mavlink_get_channel_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister
</UL>

<P><STRONG><a name="[3d2]"></a>mavlink_sha256_calc</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, commulink.o(.text.mavlink_sha256_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mavlink_sha256_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
</UL>

<P><STRONG><a name="[3c9]"></a>mavlink_sha256_final_48</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, commulink.o(.text.mavlink_sha256_final_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3d7]"></a>mavlink_sha256_init</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, commulink.o(.text.mavlink_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3ca]"></a>mavlink_sha256_update</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, commulink.o(.text.mavlink_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_calc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_signature_check
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>

<P><STRONG><a name="[3ab]"></a>mavlink_sign_packet</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, commulink.o(.text.mavlink_sign_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[3c6]"></a>mavlink_signature_check</STRONG> (Thumb, 578 bytes, Stack size 184 bytes, commulink.o(.text.mavlink_signature_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = mavlink_signature_check &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_init
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[3c2]"></a>mavlink_start_checksum</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, commulink.o(.text.mavlink_start_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mavlink_start_checksum &rArr; crc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_parse_char
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[3c4]"></a>mavlink_update_checksum</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, commulink.o(.text.mavlink_update_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mavlink_update_checksum &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_frame_char_buffer
</UL>

<P><STRONG><a name="[f4]"></a>Msg30_ATTITUDE</STRONG> (Thumb, 268 bytes, Stack size 80 bytes, mavlinksendfuncs.o(.text.Msg30_ATTITUDE))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = Msg30_ATTITUDE &rArr; mavlink_msg_attitude_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_Measurement_System_Status
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateCtrl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getRoll
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getPitch
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_System_Run_Time
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_attitude_pack_chan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[f5]"></a>Msg31_ATTITUDE_QUATERNION</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, mavlinksendfuncs.o(.text.Msg31_ATTITUDE_QUATERNION))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = Msg31_ATTITUDE_QUATERNION &rArr; mavlink_msg_attitude_quaternion_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_Measurement_System_Status
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateCtrl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_System_Run_Time
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_attitude_quaternion_pack_chan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[f6]"></a>Msg32_LOCAL_POSITION_NED</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, mavlinksendfuncs.o(.text.Msg32_LOCAL_POSITION_NED))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012<LI>Call Chain = Msg32_LOCAL_POSITION_NED &rArr; mavlink_msg_local_position_ned_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_Measurement_System_Status
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_System_Run_Time
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_local_position_ned_pack_chan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[3ad]"></a>_mav_trim_payload</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mavlinksendfuncs.o(.text._mav_trim_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2ec]"></a>crc_accumulate</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, mavlinksendfuncs.o(.text.crc_accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
</UL>

<P><STRONG><a name="[2eb]"></a>crc_accumulate_buffer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mavlinksendfuncs.o(.text.crc_accumulate_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_accumulate_buffer &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f5]"></a>crc_calculate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mavlinksendfuncs.o(.text.crc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_calculate &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f6]"></a>crc_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mavlinksendfuncs.o(.text.crc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
</UL>

<P><STRONG><a name="[3ac]"></a>mavlink_finalize_message_buffer</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, mavlinksendfuncs.o(.text.mavlink_finalize_message_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[3b9]"></a>mavlink_finalize_message_chan</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, mavlinksendfuncs.o(.text.mavlink_finalize_message_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_local_position_ned_pack_chan
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_attitude_quaternion_pack_chan
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_attitude_pack_chan
</UL>

<P><STRONG><a name="[3ba]"></a>mavlink_get_channel_status</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, mavlinksendfuncs.o(.text.mavlink_get_channel_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_get_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[292]"></a>mavlink_msg_attitude_pack_chan</STRONG> (Thumb, 168 bytes, Stack size 112 bytes, mavlinksendfuncs.o(.text.mavlink_msg_attitude_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = mavlink_msg_attitude_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE
</UL>

<P><STRONG><a name="[293]"></a>mavlink_msg_attitude_quaternion_pack_chan</STRONG> (Thumb, 176 bytes, Stack size 120 bytes, mavlinksendfuncs.o(.text.mavlink_msg_attitude_quaternion_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = mavlink_msg_attitude_quaternion_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION
</UL>

<P><STRONG><a name="[296]"></a>mavlink_msg_local_position_ned_pack_chan</STRONG> (Thumb, 168 bytes, Stack size 112 bytes, mavlinksendfuncs.o(.text.mavlink_msg_local_position_ned_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = mavlink_msg_local_position_ned_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED
</UL>

<P><STRONG><a name="[3d3]"></a>mavlink_sha256_calc</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, mavlinksendfuncs.o(.text.mavlink_sha256_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mavlink_sha256_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
</UL>

<P><STRONG><a name="[3cb]"></a>mavlink_sha256_final_48</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, mavlinksendfuncs.o(.text.mavlink_sha256_final_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3d8]"></a>mavlink_sha256_init</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, mavlinksendfuncs.o(.text.mavlink_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3cc]"></a>mavlink_sha256_update</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, mavlinksendfuncs.o(.text.mavlink_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_calc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>

<P><STRONG><a name="[3ae]"></a>mavlink_sign_packet</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, mavlinksendfuncs.o(.text.mavlink_sign_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_init
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[e9]"></a>Cmd10_MAV_CMD_SEND_WGA</STRONG> (Thumb, 198 bytes, Stack size 384 bytes, mavlinkcmdprocess.o(.text.Cmd10_MAV_CMD_SEND_WGA))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308<LI>Call Chain = Cmd10_MAV_CMD_SEND_WGA &rArr; mavlink_msg_command_ack_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position_get_WGA
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position_WGA
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_get_WGA
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_WGA
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_ack_pack_chan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[ea]"></a>Cmd11_MAV_CMD_WRITE_WGA</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, mavlinkcmdprocess.o(.text.Cmd11_MAV_CMD_WRITE_WGA))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Cmd11_MAV_CMD_WRITE_WGA &rArr; Cfg_update_WGA &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_WGA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[eb]"></a>Cmd176_MAV_CMD_DO_SET_MODE</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, mavlinkcmdprocess.o(.text.Cmd176_MAV_CMD_DO_SET_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Cmd176_MAV_CMD_DO_SET_MODE &rArr; change_Mode &rArr; STS_Change_Task_Mode
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Mode
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[ec]"></a>Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, mavlinkcmdprocess.o(.text.Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[ed]"></a>Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION</STRONG> (Thumb, 100 bytes, Stack size 360 bytes, mavlinkcmdprocess.o(.text.Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308<LI>Call Chain = Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION &rArr; mavlink_msg_protocol_version_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_protocol_version_pack_chan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[3b0]"></a>_mav_trim_payload</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mavlinkcmdprocess.o(.text._mav_trim_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2ee]"></a>crc_accumulate</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, mavlinkcmdprocess.o(.text.crc_accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
</UL>

<P><STRONG><a name="[2ed]"></a>crc_accumulate_buffer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mavlinkcmdprocess.o(.text.crc_accumulate_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_accumulate_buffer &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f7]"></a>crc_calculate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mavlinkcmdprocess.o(.text.crc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_calculate &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f8]"></a>crc_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mavlinkcmdprocess.o(.text.crc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
</UL>

<P><STRONG><a name="[3a4]"></a>mav_array_memcpy</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mavlinkcmdprocess.o(.text.mav_array_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mav_array_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_protocol_version_pack_chan
</UL>

<P><STRONG><a name="[3af]"></a>mavlink_finalize_message_buffer</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, mavlinkcmdprocess.o(.text.mavlink_finalize_message_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[3bb]"></a>mavlink_finalize_message_chan</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, mavlinkcmdprocess.o(.text.mavlink_finalize_message_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_protocol_version_pack_chan
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_command_ack_pack_chan
</UL>

<P><STRONG><a name="[3bc]"></a>mavlink_get_channel_status</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, mavlinkcmdprocess.o(.text.mavlink_get_channel_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_get_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[1ee]"></a>mavlink_msg_command_ack_pack_chan</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, mavlinkcmdprocess.o(.text.mavlink_msg_command_ack_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = mavlink_msg_command_ack_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA
</UL>

<P><STRONG><a name="[1f2]"></a>mavlink_msg_protocol_version_pack_chan</STRONG> (Thumb, 212 bytes, Stack size 112 bytes, mavlinkcmdprocess.o(.text.mavlink_msg_protocol_version_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = mavlink_msg_protocol_version_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION
</UL>

<P><STRONG><a name="[1ef]"></a>mavlink_msg_to_send_buffer</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, mavlinkcmdprocess.o(.text.mavlink_msg_to_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mavlink_msg_to_send_buffer &rArr; _mav_trim_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA
</UL>

<P><STRONG><a name="[3d4]"></a>mavlink_sha256_calc</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, mavlinkcmdprocess.o(.text.mavlink_sha256_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mavlink_sha256_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
</UL>

<P><STRONG><a name="[3cd]"></a>mavlink_sha256_final_48</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, mavlinkcmdprocess.o(.text.mavlink_sha256_final_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3d9]"></a>mavlink_sha256_init</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, mavlinkcmdprocess.o(.text.mavlink_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3ce]"></a>mavlink_sha256_update</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, mavlinkcmdprocess.o(.text.mavlink_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_calc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>

<P><STRONG><a name="[3b1]"></a>mavlink_sign_packet</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, mavlinkcmdprocess.o(.text.mavlink_sign_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[ee]"></a>Msg0_HEARTBEAT</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mavlinkrcprocess.o(.text.Msg0_HEARTBEAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Msg0_HEARTBEAT &rArr; mavlink_set_proto_version &rArr; mavlink_get_channel_status
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_set_proto_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[ef]"></a>Msg20_PARAM_REQUEST_READ</STRONG> (Thumb, 186 bytes, Stack size 360 bytes, mavlinkrcprocess.o(.text.Msg20_PARAM_REQUEST_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308<LI>Call Chain = Msg20_PARAM_REQUEST_READ &rArr; mavlink_msg_param_value_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_pack_chan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[f0]"></a>Msg21_PARAM_REQUEST_LIST</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text.Msg21_PARAM_REQUEST_LIST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Msg21_PARAM_REQUEST_LIST
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Param_List
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[f1]"></a>Msg23_PARAM_SET</STRONG> (Thumb, 282 bytes, Stack size 384 bytes, mavlinkrcprocess.o(.text.Msg23_PARAM_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 1332<LI>Call Chain = Msg23_PARAM_SET &rArr; mavlink_msg_param_value_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Params_Find
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Port
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_pack_chan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[f2]"></a>Msg66_REQUEST_DATA_STREAM</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text.Msg66_REQUEST_DATA_STREAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Msg66_REQUEST_DATA_STREAM &rArr; SetMsgRate
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[f3]"></a>Msg76_COMMAND_LONG</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text.Msg76_COMMAND_LONG))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Msg76_COMMAND_LONG
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[3b3]"></a>_mav_trim_payload</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mavlinkrcprocess.o(.text._mav_trim_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f0]"></a>crc_accumulate</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, mavlinkrcprocess.o(.text.crc_accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
</UL>

<P><STRONG><a name="[2ef]"></a>crc_accumulate_buffer</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text.crc_accumulate_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_accumulate_buffer &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2f9]"></a>crc_calculate</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text.crc_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = crc_calculate &rArr; crc_accumulate
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[2fa]"></a>crc_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mavlinkrcprocess.o(.text.crc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
</UL>

<P><STRONG><a name="[3a5]"></a>mav_array_memcpy</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text.mav_array_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mav_array_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_pack_chan
</UL>

<P><STRONG><a name="[3b2]"></a>mavlink_finalize_message_buffer</STRONG> (Thumb, 562 bytes, Stack size 72 bytes, mavlinkrcprocess.o(.text.mavlink_finalize_message_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calculate
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate_buffer
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_accumulate
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[3bd]"></a>mavlink_finalize_message_chan</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, mavlinkrcprocess.o(.text.mavlink_finalize_message_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_param_value_pack_chan
</UL>

<P><STRONG><a name="[3be]"></a>mavlink_get_channel_status</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, mavlinkrcprocess.o(.text.mavlink_get_channel_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_get_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_set_proto_version
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
</UL>

<P><STRONG><a name="[28b]"></a>mavlink_msg_param_value_pack_chan</STRONG> (Thumb, 196 bytes, Stack size 112 bytes, mavlinkrcprocess.o(.text.mavlink_msg_param_value_pack_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = mavlink_msg_param_value_pack_chan &rArr; mavlink_finalize_message_chan &rArr; mavlink_finalize_message_buffer &rArr; mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mav_array_memcpy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ
</UL>

<P><STRONG><a name="[28c]"></a>mavlink_msg_to_send_buffer</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, mavlinkrcprocess.o(.text.mavlink_msg_to_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mavlink_msg_to_send_buffer &rArr; _mav_trim_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mav_trim_payload
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ
</UL>

<P><STRONG><a name="[28a]"></a>mavlink_set_proto_version</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text.mavlink_set_proto_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mavlink_set_proto_version &rArr; mavlink_get_channel_status
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_get_channel_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg0_HEARTBEAT
</UL>

<P><STRONG><a name="[3d5]"></a>mavlink_sha256_calc</STRONG> (Thumb, 422 bytes, Stack size 316 bytes, mavlinkrcprocess.o(.text.mavlink_sha256_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = mavlink_sha256_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
</UL>

<P><STRONG><a name="[3cf]"></a>mavlink_sha256_final_48</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, mavlinkrcprocess.o(.text.mavlink_sha256_final_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3da]"></a>mavlink_sha256_init</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, mavlinkrcprocess.o(.text.mavlink_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mavlink_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
</UL>

<P><STRONG><a name="[3d0]"></a>mavlink_sha256_update</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, mavlinkrcprocess.o(.text.mavlink_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_calc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sign_packet
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>

<P><STRONG><a name="[3b4]"></a>mavlink_sign_packet</STRONG> (Thumb, 210 bytes, Stack size 160 bytes, mavlinkrcprocess.o(.text.mavlink_sign_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = mavlink_sign_packet &rArr; mavlink_sha256_final_48 &rArr; mavlink_sha256_update &rArr; mavlink_sha256_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_final_48
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_buffer
</UL>

<P><STRONG><a name="[88]"></a>Modes_Server</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, modes.o(.text.Modes_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modes_Server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.text.init_Modes)
</UL>
<P><STRONG><a name="[d0]"></a>M00_init_MainFunc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, m00_init.o(.text.M00_init_MainFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = M00_init_MainFunc &rArr; OLED_Draw_TickCross8x6 &rArr; FDraw_TickCross8x6
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setSignal
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_TickCross8x6
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_Measurement_System_Status
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_Measurement_System_Status
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m00_init.o(.rodata.M00_init)
</UL>
<P><STRONG><a name="[ce]"></a>M00_init_enter</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, m00_init.o(.text.M00_init_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = M00_init_enter &rArr; OLED_Draw_Str8x6 &rArr; FDraw_Font8x6
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setStatus
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_TickCross8x6
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Str8x6
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m00_init.o(.rodata.M00_init)
</UL>
<P><STRONG><a name="[cf]"></a>M00_init_exit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m00_init.o(.text.M00_init_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M00_init_exit &rArr; OLED_Update &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m00_init.o(.rodata.M00_init)
</UL>
<P><STRONG><a name="[d3]"></a>M01_Ground_MainFunc</STRONG> (Thumb, 768 bytes, Stack size 40 bytes, m01_ground.o(.text.M01_Ground_MainFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = M01_Ground_MainFunc &rArr; OLED_Screen_BasicInf_Refresh &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setSignal
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Receiver
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_Refresh
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m01_ground.o(.rodata.M01_Ground)
</UL>
<P><STRONG><a name="[d1]"></a>M01_Ground_enter</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, m01_ground.o(.text.M01_Ground_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = M01_Ground_enter &rArr; OLED_Screen_BasicInf_init &rArr; OLED_Screen_BasicInf_Refresh &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setStatus
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Str8x6
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Screen_BasicInf_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m01_ground.o(.rodata.M01_Ground)
</UL>
<P><STRONG><a name="[d2]"></a>M01_Ground_exit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m01_ground.o(.text.M01_Ground_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M01_Ground_exit &rArr; OLED_Update &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Update
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m01_ground.o(.rodata.M01_Ground)
</UL>
<P><STRONG><a name="[d6]"></a>M10_RCCalib_MainFunc</STRONG> (Thumb, 3924 bytes, Stack size 200 bytes, m10_rccalib.o(.text.M10_RCCalib_MainFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = M10_RCCalib_MainFunc &rArr; Cfg_update_Channel_Scale &rArr; EEPROMProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setStatus
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setSignal
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setProgress
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Receiver
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_Channel_Scale
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_Channel_Reflection
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_Channel_Min
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m10_rccalib.o(.rodata.M10_RCCalib)
</UL>
<P><STRONG><a name="[d4]"></a>M10_RCCalib_enter</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, m10_rccalib.o(.text.M10_RCCalib_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = M10_RCCalib_enter &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setStatus
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setSignal
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Receiver_Type
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Receiver
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m10_rccalib.o(.rodata.M10_RCCalib)
</UL>
<P><STRONG><a name="[d5]"></a>M10_RCCalib_exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m10_rccalib.o(.text.M10_RCCalib_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M10_RCCalib_exit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m10_rccalib.o(.rodata.M10_RCCalib)
</UL>
<P><STRONG><a name="[d9]"></a>M12_AccCalib_MainFunc</STRONG> (Thumb, 4152 bytes, Stack size 376 bytes, m12_acccalib.o(.text.M12_AccCalib_MainFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = M12_AccCalib_MainFunc &rArr; Matrix_Inverse &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setStatus
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setSignal
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setProgress
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateCtrl
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationFilted
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_GyroscopeOffset
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_AccelerometerSensivitity
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_AccelerometerOffset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_int_plus
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_subtract
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_square
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_mult
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_F_dF
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_Sums
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m12_acccalib.o(.rodata.M12_AccCalib)
</UL>
<P><STRONG><a name="[d7]"></a>M12_AccCalib_enter</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, m12_acccalib.o(.text.M12_AccCalib_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = M12_AccCalib_enter &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setProgress
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_All_Sums
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m12_acccalib.o(.rodata.M12_AccCalib)
</UL>
<P><STRONG><a name="[d8]"></a>M12_AccCalib_exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m12_acccalib.o(.text.M12_AccCalib_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M12_AccCalib_exit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m12_acccalib.o(.rodata.M12_AccCalib)
</UL>
<P><STRONG><a name="[250]"></a>Matrix_Inverse</STRONG> (Thumb, 1062 bytes, Stack size 64 bytes, m12_acccalib.o(.text.Matrix_Inverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Matrix_Inverse &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_f
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[251]"></a>clear_All_Sums</STRONG> (Thumb, 198 bytes, Stack size 4 bytes, m12_acccalib.o(.text.clear_All_Sums))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clear_All_Sums
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_enter
</UL>

<P><STRONG><a name="[249]"></a>clear_Sums</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, m12_acccalib.o(.text.clear_Sums))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clear_Sums
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[24f]"></a>get_F_dF</STRONG> (Thumb, 1300 bytes, Stack size 88 bytes, m12_acccalib.o(.text.get_F_dF))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_F_dF
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[288]"></a>is_zero_f</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, m12_acccalib.o(.text.is_zero_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = is_zero_f
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse
</UL>

<P><STRONG><a name="[248]"></a>vector3_float_mult</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, m12_acccalib.o(.text.vector3_float_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vector3_float_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[24d]"></a>vector3_float_square</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, m12_acccalib.o(.text.vector3_float_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vector3_float_square
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[24c]"></a>vector3_float_subtract</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, m12_acccalib.o(.text.vector3_float_subtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vector3_float_subtract
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[24e]"></a>vector3_int_plus</STRONG> (Thumb, 64 bytes, Stack size 44 bytes, m12_acccalib.o(.text.vector3_int_plus))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vector3_int_plus
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib_MainFunc
</UL>

<P><STRONG><a name="[dc]"></a>M13_MagCalib_MainFunc</STRONG> (Thumb, 3548 bytes, Stack size 288 bytes, m13_magcalib.o(.text.M13_MagCalib_MainFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = M13_MagCalib_MainFunc &rArr; Matrix_Inverse &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setStatus
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setSignal
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setProgress
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pass_time
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TIME_now
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_isValid
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateCtrl
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MagnetometerSensivitity
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_MagnetometerOffset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_square
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sums
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_F_dF
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m13_magcalib.o(.rodata.M13_MagCalib)
</UL>
<P><STRONG><a name="[da]"></a>M13_MagCalib_enter</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, m13_magcalib.o(.text.M13_MagCalib_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M13_MagCalib_enter &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setProgress
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_sums
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m13_magcalib.o(.rodata.M13_MagCalib)
</UL>
<P><STRONG><a name="[db]"></a>M13_MagCalib_exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m13_magcalib.o(.text.M13_MagCalib_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M13_MagCalib_exit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m13_magcalib.o(.rodata.M13_MagCalib)
</UL>
<P><STRONG><a name="[255]"></a>Matrix_Inverse</STRONG> (Thumb, 1062 bytes, Stack size 64 bytes, m13_magcalib.o(.text.Matrix_Inverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Matrix_Inverse &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_f
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
</UL>

<P><STRONG><a name="[254]"></a>get_F_dF</STRONG> (Thumb, 2402 bytes, Stack size 64 bytes, m13_magcalib.o(.text.get_F_dF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_F_dF
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
</UL>

<P><STRONG><a name="[289]"></a>is_zero_f</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, m13_magcalib.o(.text.is_zero_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = is_zero_f
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse
</UL>

<P><STRONG><a name="[253]"></a>reset_sums</STRONG> (Thumb, 378 bytes, Stack size 4 bytes, m13_magcalib.o(.text.reset_sums))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reset_sums
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_enter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
</UL>

<P><STRONG><a name="[252]"></a>vector3_float_square</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, m13_magcalib.o(.text.vector3_float_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vector3_float_square
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib_MainFunc
</UL>

<P><STRONG><a name="[df]"></a>M15_HorizontalCalib_MainFunc</STRONG> (Thumb, 1244 bytes, Stack size 144 bytes, m15_horizontalcalib.o(.text.M15_HorizontalCalib_MainFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = M15_HorizontalCalib_MainFunc &rArr; Quaternion_get_PRQuat &rArr; safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setSignal
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setProgress
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateCtrl
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationFilted
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_get_PRQuat
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_update_Horizontal_Calibration
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_subtract
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_square
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_conjugate
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m15_horizontalcalib.o(.rodata.M15_HorizontalCalib)
</UL>
<P><STRONG><a name="[dd]"></a>M15_HorizontalCalib_enter</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, m15_horizontalcalib.o(.text.M15_HorizontalCalib_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M15_HorizontalCalib_enter &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setProgress
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m15_horizontalcalib.o(.rodata.M15_HorizontalCalib)
</UL>
<P><STRONG><a name="[de]"></a>M15_HorizontalCalib_exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m15_horizontalcalib.o(.text.M15_HorizontalCalib_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M15_HorizontalCalib_exit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m15_horizontalcalib.o(.rodata.M15_HorizontalCalib)
</UL>
<P><STRONG><a name="[25a]"></a>Quaternion_conjugate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, m15_horizontalcalib.o(.text.Quaternion_conjugate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Quaternion_conjugate
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
</UL>

<P><STRONG><a name="[257]"></a>vector3_float_square</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, m15_horizontalcalib.o(.text.vector3_float_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vector3_float_square
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
</UL>

<P><STRONG><a name="[256]"></a>vector3_float_subtract</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, m15_horizontalcalib.o(.text.vector3_float_subtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vector3_float_subtract
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M15_HorizontalCalib_MainFunc
</UL>

<P><STRONG><a name="[e2]"></a>M30_Att_MainFunc</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, m30_att.o(.text.M30_Att_MainFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = M30_Att_MainFunc &rArr; Attitude_Control_set_Target_RollPitch &rArr; safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Receiver
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_symmetry_range_offset_float
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m30_att.o(.rodata.M30_Att)
</UL>
<P><STRONG><a name="[e0]"></a>M30_Att_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m30_att.o(.text.M30_Att_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = M30_Att_enter &rArr; Attitude_Control_Enable &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m30_att.o(.rodata.M30_Att)
</UL>
<P><STRONG><a name="[e1]"></a>M30_Att_exit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m30_att.o(.text.M30_Att_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = M30_Att_exit &rArr; Attitude_Control_Disable &rArr; Altitude_Control_Disable &rArr; Position_Control_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m30_att.o(.rodata.M30_Att)
</UL>
<P><STRONG><a name="[25c]"></a>in_symmetry_range_offset_float</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, m30_att.o(.text.in_symmetry_range_offset_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = in_symmetry_range_offset_float
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_Att_MainFunc
</UL>

<P><STRONG><a name="[e5]"></a>M32_PosCtrl_MainFunc</STRONG> (Thumb, 916 bytes, Stack size 120 bytes, m32_posctrl.o(.text.M32_PosCtrl_MainFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = M32_PosCtrl_MainFunc &rArr; Position_Control_Enable &rArr; Altitude_Control_Enable &rArr; Attitude_Control_Enable &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setSignal
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Receiver
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_attitude
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_getYaw
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance_y
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance_x
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Control_Enabled
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_symmetry_range_offset_float
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_deadband_float
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m32_posctrl.o(.rodata.M32_PosCtrl)
</UL>
<P><STRONG><a name="[e3]"></a>M32_PosCtrl_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m32_posctrl.o(.text.M32_PosCtrl_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = M32_PosCtrl_enter &rArr; Altitude_Control_Enable &rArr; Attitude_Control_Enable &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setStatus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m32_posctrl.o(.rodata.M32_PosCtrl)
</UL>
<P><STRONG><a name="[e4]"></a>M32_PosCtrl_exit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m32_posctrl.o(.text.M32_PosCtrl_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = M32_PosCtrl_exit &rArr; Attitude_Control_Disable &rArr; Altitude_Control_Disable &rArr; Position_Control_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m32_posctrl.o(.rodata.M32_PosCtrl)
</UL>
<P><STRONG><a name="[266]"></a>apply_deadband_float</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, m32_posctrl.o(.text.apply_deadband_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = apply_deadband_float
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[264]"></a>in_symmetry_range_offset_float</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, m32_posctrl.o(.text.in_symmetry_range_offset_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = in_symmetry_range_offset_float
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl_MainFunc
</UL>

<P><STRONG><a name="[e8]"></a>M35_Auto1_MainFunc</STRONG> (Thumb, 1992 bytes, Stack size 192 bytes, m35_auto1.o(.text.M35_Auto1_MainFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = M35_Auto1_MainFunc &rArr; Position_Control_Enable &rArr; Altitude_Control_Enable &rArr; Attitude_Control_Enable &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;static_write_uart1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Receiver
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Send
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Measurement_System_Status
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_Mode
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyHeading
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_symmetry_range_offset_float
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m35_auto1.o(.rodata.M35_Auto1)
</UL>
<P><STRONG><a name="[e6]"></a>M35_Auto1_enter</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m35_auto1.o(.text.M35_Auto1_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = M35_Auto1_enter &rArr; Altitude_Control_Enable &rArr; Attitude_Control_Enable &rArr; Quaternion_getYaw &rArr; __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_setStatus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m35_auto1.o(.rodata.M35_Auto1)
</UL>
<P><STRONG><a name="[e7]"></a>M35_Auto1_exit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m35_auto1.o(.text.M35_Auto1_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = M35_Auto1_exit &rArr; Attitude_Control_Disable &rArr; Altitude_Control_Disable &rArr; Position_Control_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m35_auto1.o(.rodata.M35_Auto1)
</UL>
<P><STRONG><a name="[26a]"></a>in_symmetry_range_offset_float</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, m35_auto1.o(.text.in_symmetry_range_offset_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = in_symmetry_range_offset_float
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1_MainFunc
</UL>

<P><STRONG><a name="[300]"></a>ESO_AngularRate_get_EsAngularAcceleration</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ctrl_attitude.o(.text.ESO_AngularRate_get_EsAngularAcceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_AngularRate_get_EsAngularAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[2ff]"></a>ESO_AngularRate_get_EsAngularRate</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text.ESO_AngularRate_get_EsAngularRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_AngularRate_get_EsAngularRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[30b]"></a>ESO_AngularRate_get_EsDisturbance</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text.ESO_AngularRate_get_EsDisturbance))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_AngularRate_get_EsDisturbance
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[30c]"></a>ESO_AngularRate_get_EsMainPower</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl_attitude.o(.text.ESO_AngularRate_get_EsMainPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ESO_AngularRate_get_EsMainPower
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[2fe]"></a>ESO_AngularRate_run</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, ctrl_attitude.o(.text.ESO_AngularRate_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESO_AngularRate_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[311]"></a>ESO_AngularRate_update_u</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.ESO_AngularRate_update_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESO_AngularRate_update_u
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X6_PWM
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X4_PWM
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C4_PWM
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C42_PWM
</UL>

<P><STRONG><a name="[1f7]"></a>ESO_h_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ctrl_attitude.o(.text.ESO_h_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ESO_h_init &rArr; RingBuf_float_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_float_init
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[1f9]"></a>ESO_h_run</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, ctrl_attitude.o(.text.ESO_h_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ESO_h_run &rArr; RingBuf_float_push
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_float_push
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuf_float_GetHis
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[3dd]"></a>ESO_h_update_u</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.ESO_h_update_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESO_h_update_u
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[201]"></a>Filter_Butter2_LP_float_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ctrl_attitude.o(.text.Filter_Butter2_LP_float_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Filter_Butter2_LP_float_init &rArr; Filter_Butter2_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP_float_setCutoffFrequency
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Attitude
</UL>

<P><STRONG><a name="[202]"></a>Filter_Butter2_LP_float_reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ctrl_attitude.o(.text.Filter_Butter2_LP_float_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Filter_Butter2_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP_float_run
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP_float_init
</UL>

<P><STRONG><a name="[204]"></a>Filter_Butter2_LP_float_run</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ctrl_attitude.o(.text.Filter_Butter2_LP_float_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Filter_Butter2_LP_float_run &rArr; Filter_Butter2_LP_float_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter2_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[304]"></a>Quaternion_conjugate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ctrl_attitude.o(.text.Quaternion_conjugate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Quaternion_conjugate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[1fa]"></a>RingBuf_float_GetHis</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, ctrl_attitude.o(.text.RingBuf_float_GetHis))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RingBuf_float_GetHis
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h_run
</UL>

<P><STRONG><a name="[1f8]"></a>RingBuf_float_init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ctrl_attitude.o(.text.RingBuf_float_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RingBuf_float_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h_init
</UL>

<P><STRONG><a name="[1fb]"></a>RingBuf_float_push</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, ctrl_attitude.o(.text.RingBuf_float_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RingBuf_float_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h_run
</UL>

<P><STRONG><a name="[1b4]"></a>TD4_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ctrl_attitude.o(.text.TD4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TD4_init &rArr; TD4_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
</UL>

<P><STRONG><a name="[2d6]"></a>TD4_reset</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ctrl_attitude.o(.text.TD4_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TD4_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_init
</UL>

<P><STRONG><a name="[308]"></a>TD4_track3</STRONG> (Thumb, 512 bytes, Stack size 68 bytes, ctrl_attitude.o(.text.TD4_track3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TD4_track3
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[301]"></a>TD4_track4</STRONG> (Thumb, 790 bytes, Stack size 104 bytes, ctrl_attitude.o(.text.TD4_track4))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TD4_track4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[307]"></a>constrain_float</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ctrl_attitude.o(.text.constrain_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = constrain_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[310]"></a>ctrl_Attitude_MultiRotor_C42_PWM</STRONG> (Thumb, 1796 bytes, Stack size 184 bytes, ctrl_attitude.o(.text.ctrl_Attitude_MultiRotor_C42_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ctrl_Attitude_MultiRotor_C42_PWM &rArr; update_output_throttle &rArr; get_history_Airframe_attitude &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Out
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Receiver
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorStartingThrottle
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throttle_nonlinear_compensation
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate_update_u
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[30f]"></a>ctrl_Attitude_MultiRotor_C4_PWM</STRONG> (Thumb, 1352 bytes, Stack size 152 bytes, ctrl_attitude.o(.text.ctrl_Attitude_MultiRotor_C4_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ctrl_Attitude_MultiRotor_C4_PWM &rArr; update_output_throttle &rArr; get_history_Airframe_attitude &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Out
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Receiver
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorStartingThrottle
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throttle_nonlinear_compensation
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate_update_u
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[30d]"></a>ctrl_Attitude_MultiRotor_X4_PWM</STRONG> (Thumb, 1388 bytes, Stack size 152 bytes, ctrl_attitude.o(.text.ctrl_Attitude_MultiRotor_X4_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ctrl_Attitude_MultiRotor_X4_PWM &rArr; update_output_throttle &rArr; get_history_Airframe_attitude &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Out
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Receiver
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorStartingThrottle
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throttle_nonlinear_compensation
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate_update_u
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[30e]"></a>ctrl_Attitude_MultiRotor_X6_PWM</STRONG> (Thumb, 1516 bytes, Stack size 160 bytes, ctrl_attitude.o(.text.ctrl_Attitude_MultiRotor_X6_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ctrl_Attitude_MultiRotor_X6_PWM &rArr; update_output_throttle &rArr; get_history_Airframe_attitude &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Out
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_Receiver
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorStartingThrottle
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throttle_nonlinear_compensation
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate_update_u
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[303]"></a>get_Quaternion</STRONG> (Thumb, 140 bytes, Stack size 124 bytes, ctrl_attitude.o(.text.get_Quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = get_Quaternion
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[2fd]"></a>get_QuaternionEf</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ctrl_attitude.o(.text.get_QuaternionEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_QuaternionEf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[309]"></a>in_symmetry_range_float</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ctrl_attitude.o(.text.in_symmetry_range_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = in_symmetry_range_float
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[1b7]"></a>init_ESO_AngularRate</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ctrl_attitude.o(.text.init_ESO_AngularRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_ESO_AngularRate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable
</UL>

<P><STRONG><a name="[1b9]"></a>safe_sqrt_f</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ctrl_attitude.o(.text.safe_sqrt_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;throttle_nonlinear_compensation
</UL>

<P><STRONG><a name="[312]"></a>throttle_nonlinear_compensation</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, ctrl_attitude.o(.text.throttle_nonlinear_compensation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = throttle_nonlinear_compensation &rArr; safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorStartingThrottle
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorNonlineFactor
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorFullThrottleRatio
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X6_PWM
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X4_PWM
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C4_PWM
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C42_PWM
</UL>

<P><STRONG><a name="[2fc]"></a>update_output_throttle</STRONG> (Thumb, 752 bytes, Stack size 112 bytes, ctrl_attitude.o(.text.update_output_throttle))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = update_output_throttle &rArr; get_history_Airframe_attitude &rArr; get_history_attitude &rArr; Quaternion_Mult &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lean_angle_cosin
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationCtrl
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate_axis_z
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_MotorStartingThrottle
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_Airframe_attitude
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_square
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_mult
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_symmetry_range_float
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h_update_u
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h_run
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X6_PWM
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_X4_PWM
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C4_PWM
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude_MultiRotor_C42_PWM
</UL>

<P><STRONG><a name="[305]"></a>vector3_float_mult</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, ctrl_attitude.o(.text.vector3_float_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = vector3_float_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[306]"></a>vector3_float_plus</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, ctrl_attitude.o(.text.vector3_float_plus))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vector3_float_plus
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[3de]"></a>vector3_float_square</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, ctrl_attitude.o(.text.vector3_float_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vector3_float_square
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle
</UL>

<P><STRONG><a name="[30a]"></a>vector3_float_subtract</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, ctrl_attitude.o(.text.vector3_float_subtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vector3_float_subtract
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude
</UL>

<P><STRONG><a name="[207]"></a>Filter_Butter4_LP_float_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ctrl_position.o(.text.Filter_Butter4_LP_float_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Filter_Butter4_LP_float_init &rArr; Filter_Butter4_LP_float_setCutoffFrequency &rArr; BUT_IIR_calc_freq_f &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_setCutoffFrequency
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Position
</UL>

<P><STRONG><a name="[208]"></a>Filter_Butter4_LP_float_reset</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ctrl_position.o(.text.Filter_Butter4_LP_float_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Filter_Butter4_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_run
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_init
</UL>

<P><STRONG><a name="[20a]"></a>Filter_Butter4_LP_float_run</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, ctrl_position.o(.text.Filter_Butter4_LP_float_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Filter_Butter4_LP_float_run &rArr; Filter_Butter4_LP_float_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[2d7]"></a>TD4_init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ctrl_position.o(.text.TD4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TD4_init &rArr; TD4_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ctrl_Position
</UL>

<P><STRONG><a name="[2d8]"></a>TD4_reset</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, ctrl_position.o(.text.TD4_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TD4_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_init
</UL>

<P><STRONG><a name="[316]"></a>TD4_track3</STRONG> (Thumb, 512 bytes, Stack size 68 bytes, ctrl_position.o(.text.TD4_track3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TD4_track3
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[315]"></a>TD4_track4</STRONG> (Thumb, 790 bytes, Stack size 104 bytes, ctrl_position.o(.text.TD4_track4))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TD4_track4
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[31b]"></a>constrain_range_float</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ctrl_position.o(.text.constrain_range_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = constrain_range_float
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[2e5]"></a>constrain_vector2_float</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ctrl_position.o(.text.constrain_vector2_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = constrain_vector2_float &rArr; safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt_f
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[317]"></a>in_symmetry_range_float</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ctrl_position.o(.text.in_symmetry_range_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = in_symmetry_range_float
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
</UL>

<P><STRONG><a name="[2e6]"></a>safe_sqrt_f</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ctrl_position.o(.text.safe_sqrt_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = safe_sqrt_f &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_vector2_float
</UL>

<P><STRONG><a name="[3fa]"></a>ScheduleNextTransmission</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbbuffer.o(i.ScheduleNextTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ScheduleNextTransmission
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufUsed
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufContigUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>

<P><STRONG><a name="[a1]"></a>CDCTickHandler</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, usbdcdc.o(i.CDCTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CDCTickHandler &rArr; SendBreak
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(i.USBDCDCCompositeInit)
</UL>
<P><STRONG><a name="[bc]"></a>HandleConfigChange</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbdcdc.o(i.HandleConfigChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HandleConfigChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>HandleDevice</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, usbdcdc.o(i.HandleDevice))
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>HandleDisconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbdcdc.o(i.HandleDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HandleDisconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>HandleEP0Data</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usbdcdc.o(i.HandleEP0Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandleEP0Data &rArr; USBDCDStallEP0
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDStallEP0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>HandleEndpoints</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usbdcdc.o(i.HandleEndpoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HandleEndpoints &rArr; SendSerialState &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSerialState
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>HandleRequests</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, usbdcdc.o(i.HandleRequests))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HandleRequests &rArr; USBDCDSendDataEP0 &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDStallEP0
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDSendDataEP0
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDRequestDataEP0
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>HandleResume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbdcdc.o(i.HandleResume))
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>HandleSuspend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbdcdc.o(i.HandleSuspend))
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[3e8]"></a>SendBreak</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbdcdc.o(i.SendBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCTickHandler
</UL>

<P><STRONG><a name="[3ef]"></a>SendSerialState</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usbdcdc.o(i.SendSerialState))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SendSerialState &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
</UL>

<P><STRONG><a name="[1bb]"></a>Attitude_Heading_Correction</STRONG> (Thumb, 6984 bytes, Stack size 120 bytes, ms_attitude.o(.text.Attitude_Heading_Correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Attitude_Heading_Correction &rArr; Quaternion_rotate_delta_angle &rArr; Quaternion_normalize &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_set_inValid
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_isValid
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter4_LP_float_setCutoffFrequency
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector3_float_constrain
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate_delta_angle
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_rotate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Mult
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cfg_get_Horizontal_Calibration
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_attitude
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_acceleration
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude
</UL>

<P><STRONG><a name="[283]"></a>PositionKalmanFilter_run_s_sv</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, ms_position.o(.text.PositionKalmanFilter_run_s_sv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PositionKalmanFilter_run_s_sv
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
</UL>

<P><STRONG><a name="[282]"></a>PositionKalmanFilter_run_s_svb</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, ms_position.o(.text.PositionKalmanFilter_run_s_svb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PositionKalmanFilter_run_s_svb
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position
</UL>

<P><STRONG><a name="[c4]"></a>USBDClearFeature</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usbdenum.o(i.USBDClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStallClear
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[427]"></a>USBDEP0StateTx</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbdenum.o(i.USBDEP0StateTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDSendDataEP0
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetStatus
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetInterface
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetConfiguration
</UL>

<P><STRONG><a name="[42a]"></a>USBDEP0StateTxConfig</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, usbdenum.o(i.USBDEP0StateTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
</UL>

<P><STRONG><a name="[c9]"></a>USBDGetConfiguration</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbdenum.o(i.USBDGetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBDGetConfiguration &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>USBDGetDescriptor</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, usbdenum.o(i.USBDGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBDGetDescriptor &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetSize
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>USBDGetInterface</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbdenum.o(i.USBDGetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBDGetInterface &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>USBDGetStatus</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbdenum.o(i.USBDGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBDGetStatus &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[42c]"></a>USBDReadAndDispatchRequest</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbdenum.o(i.USBDReadAndDispatchRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBDReadAndDispatchRequest &rArr; USBEndpointDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[c6]"></a>USBDSetAddress</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbdenum.o(i.USBDSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBDSetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>USBDSetConfiguration</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, usbdenum.o(i.USBDSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBDSetConfiguration &rArr; USBDeviceConfig &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>USBDSetDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbdenum.o(i.USBDSetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDSetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>USBDSetFeature</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usbdenum.o(i.USBDSetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDSetFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>USBDSetInterface</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, usbdenum.o(i.USBDSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBDSetInterface &rArr; USBDeviceConfigAlternate &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>USBDSyncFrame</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbdenum.o(i.USBDSyncFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDSyncFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>DMAUSBIntHandler</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, usbdma.o(i.DMAUSBIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMAUSBIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[ac]"></a>DMAUSBIntStatusClear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdma.o(i.DMAUSBIntStatusClear))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[ad]"></a>DMAUSBStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbdma.o(i.DMAUSBStatus))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b0]"></a>iDMAUSBArbSizeSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBArbSizeSet))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b1]"></a>iDMAUSBChannelAllocate</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbdma.o(i.iDMAUSBChannelAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iDMAUSBChannelAllocate
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b9]"></a>iDMAUSBChannelDisable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntDisable
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b8]"></a>iDMAUSBChannelEnable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIsEnabled
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntEnable
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b5]"></a>iDMAUSBChannelIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBChannelIntDisable))
<BR><BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b4]"></a>iDMAUSBChannelIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBChannelIntEnable))
<BR><BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b7]"></a>iDMAUSBChannelRelease</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b2]"></a>iDMAUSBChannelStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b3]"></a>iDMAUSBIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBIntStatus))
<BR><BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[b6]"></a>iDMAUSBTransfer</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, usbdma.o(i.iDMAUSBTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iDMAUSBTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointPacketCountSet
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAEnable
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAConfigSet
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelEnable
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelCountSet
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelConfigSet
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelAddressSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[ba]"></a>iDMAUSBUnitSizeSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBUnitSizeSet))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a2]"></a>uDMAUSBArbSizeSet</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBArbSizeSet))
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a3]"></a>uDMAUSBChannelAllocate</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbdma.o(i.uDMAUSBChannelAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uDMAUSBChannelAllocate
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeDisable
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a4]"></a>uDMAUSBChannelDisable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelDisable
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a5]"></a>uDMAUSBChannelEnable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIsEnabled
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a7]"></a>uDMAUSBChannelIntDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelIntDisable))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a6]"></a>uDMAUSBChannelIntEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelIntEnable))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a8]"></a>uDMAUSBChannelRelease</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeDisable
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a9]"></a>uDMAUSBChannelStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelStatus))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[ab]"></a>uDMAUSBIntStatus</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbdma.o(i.uDMAUSBIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uDMAUSBIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelModeGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[ae]"></a>uDMAUSBTransfer</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, usbdma.o(i.uDMAUSBTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uDMAUSBTransfer &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFIFOAddrGet
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointPacketCountSet
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAConfigSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[af]"></a>uDMAUSBUnitSizeSet</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usbdma.o(i.uDMAUSBUnitSizeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uDMAUSBUnitSizeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[47a]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[46c]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[81]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[194]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
